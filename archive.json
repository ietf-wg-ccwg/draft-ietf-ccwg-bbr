{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-09-16T01:24:35.221703+00:00",
  "repo": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
  "labels": [
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "Editorial",
      "description": "Editorial issues or PRs that don't change the wire image or normative behavior.",
      "color": "006b75"
    }
  ],
  "issues": [
    {
      "number": 4,
      "id": "I_kwDOL3MllM6agc6U",
      "title": "Talk about TCP and SACK less",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/4",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "Editorial"
      ],
      "body": "I believe the intent is to be as agnostic to the specific transport as possible, so implementers in QUIC or other transports can implement BBR as well.\r\n\r\nCurrently the draft has a number of references to TCP and SACK.  Some of them are needed for technical accuracy, but others could be removed or changed to more general language.",
      "createdAt": "2024-10-16T15:13:46Z",
      "updatedAt": "2025-02-21T18:57:11Z",
      "closedAt": "2025-02-21T18:57:11Z",
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Great point. @ianswett  or @jbeshay -  do you have interest and cycles to take this on? :-) IMHO it would be good to have editorial changes from someone who is familiar with QUIC terminology, so the new text makes sense for both TCP and QUIC.\r\n",
          "createdAt": "2024-10-21T14:28:41Z",
          "updatedAt": "2024-10-21T14:28:41Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I was intending to tackle this, but I'm always happy to review someone else's PRs as well.",
          "createdAt": "2024-10-21T14:42:48Z",
          "updatedAt": "2024-10-21T14:42:48Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Great, thanks!\r\n",
          "createdAt": "2024-10-21T15:36:56Z",
          "updatedAt": "2024-10-21T15:36:56Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOL3MllM6dEqcL",
      "title": "Decide and document the BBR draft's stance on ECN",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/7",
      "state": "CLOSED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [],
      "body": "Today at the IETF 121 CCWG session, @martinduke asked about the BBR draft's stance on ECN.\r\n\r\nI agree that we should decide and document the BBR draft's stance on ECN.\r\n\r\nIn particular we should probably decide on and document the stance on both:\r\n\r\n+ RFC 3168 ECN\r\n+ L4S ECN\r\n\r\nFor the record, so the ideas are preserved and discussed, I'm pasting some of the CCWG session notes from [Borrowing from the session ](https://notes.ietf.org/notes-ietf-121-ccwg) :\r\n\r\n+ Martin Duke: What about ECT(0), which could be a smilair reaction to loss. Reply - would need to look at this.\r\n\r\n+ Michael Welzl: Following-up, there is ABE (RFC8511), which is a simple change, which uses a smaller backoff to an ECN mark using ECT(0), rather than the full L4S approach, but still with significant benefit. Reply - This is something to consider if we consider ECN.\r\n\r\ncc: @ianswett @jbeshay @renghardt @ekinnear @mattmathis @mwelzl",
      "createdAt": "2024-11-05T11:51:57Z",
      "updatedAt": "2025-04-10T15:24:55Z",
      "closedAt": "2025-04-10T15:24:55Z",
      "comments": [
        {
          "author": "chromi",
          "authorAssociation": "NONE",
          "body": "RFC-3168 requires a CE mark to be treated equivalently to a packet loss.  RFC-8511 modifies the *quantitative* extent to which this must be done, but essentially preserves the *qualitative* equivalency.\r\n\r\nBBR is a little special in that packet loss does not immediately cause a multiplicative-decrease reaction as in conventional window-based CCAs.  That is, BBR only considers packet loss to be a congestion indication above a certain threshold level.  Plain vanilla TCP with RFC-3168 support, however, only reports one CE mark per RTT.  If the BDP exceeds a few dozen segments, that would prevent RFC-3168 from signalling enough CE marks that, if treated strictly equivalent to packet loss, would meet the corresponding threshold and actually trigger a backoff.\r\n\r\nQUIC and SCTP don't have this limitation.  If multiple CE marks occur per RTT, they can report all of them \"precisely\" to the sender, and BBR would be able to meaningfully react to them as equivalents to loss.  There are also certain extensions to TCP which provide a similar capability.\r\n\r\nMy proposal to resolve this is straightforward:\r\n\r\n- If \"precise\" reporting of ECN marks is available, ie. multiple CE marks per RTT can be distinguished, then BBR should treat CE marks as equivalent to loss.\r\n- Otherwise, BBR should react to *single* CE marks in a manner more closely equivalent to standard CCA behaviour.  This could be by immediately and unconditionally entering the ProbeRTT state.\r\n",
          "createdAt": "2024-11-05T12:44:55Z",
          "updatedAt": "2024-11-05T12:44:55Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "I thought the ECT(0) thing would be straightforward, but Michael's comment\r\nmade it clear that is not a no-brainer. Therefore Neal's assessment that we\r\nshouldn't do anything without some experimentation and deployment is\r\nconvincing to me.\r\n\r\nSo I wouldn't hold this up based on someone willing to do the work,\r\nalthough (as Neal knows) I have some intent to some L4S-BBR testing. It may\r\nnot happen on a timetable useful for this draft.\r\n\r\nOn Tue, Nov 5, 2024 at 12:45\u202fPM Jonathan Morton ***@***.***>\r\nwrote:\r\n\r\n> RFC-3168 requires a CE mark to be treated equivalently to a packet loss.\r\n> RFC-8511 modifies the *quantitative* extent to which this must be done,\r\n> but essentially preserves the *qualitative* equivalency.\r\n>\r\n> BBR is a little special in that packet loss does not immediately cause a\r\n> multiplicative-decrease reaction as in conventional window-based CCAs. That\r\n> is, BBR only considers packet loss to be a congestion indication above a\r\n> certain threshold level. Plain vanilla TCP with RFC-3168 support, however,\r\n> only reports one CE mark per RTT. If the BDP exceeds a few dozen segments,\r\n> that would prevent RFC-3168 from signalling enough CE marks that, if\r\n> treated strictly equivalent to packet loss, would meet the corresponding\r\n> threshold and actually trigger a backoff.\r\n>\r\n> QUIC and SCTP don't have this limitation. If multiple CE marks occur per\r\n> RTT, they can report all of them \"precisely\" to the sender, and BBR would\r\n> be able to meaningfully react to them as equivalents to loss. There are\r\n> also certain extensions to TCP which provide a similar capability.\r\n>\r\n> My proposal to resolve this is straightforward:\r\n>\r\n>    - If \"precise\" reporting of ECN marks is available, ie. multiple CE\r\n>    marks per RTT can be distinguished, then BBR should treat CE marks as\r\n>    equivalent to loss.\r\n>    - Otherwise, BBR should react to *single* CE marks in a manner more\r\n>    closely equivalent to standard CCA behaviour. This could be by immediately\r\n>    and unconditionally entering the ProbeRTT state.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/7#issuecomment-2457074299>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/AF2EYEKFHKSKQ2AGTWG7LTLZ7C4V3AVCNFSM6AAAAABRGLUIJSVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDINJXGA3TIMRZHE>\r\n> .\r\n> You are receiving this because you were mentioned.Message ID:\r\n> ***@***.***>\r\n>\r\n",
          "createdAt": "2024-11-05T13:22:44Z",
          "updatedAt": "2024-11-05T13:22:44Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "NONE",
          "body": "I don't understand really why the simple approach in RFC 8511 can't just be used for ECT(0). I don't think we need to invent a new method - what is said there could be matched to BBR; I'd hope that any L4S device on path will also react to ECT(0) and mark as CE, therefore it would give you at least a helpful ECN reaction to a filling bottleneck",
          "createdAt": "2024-11-05T13:36:02Z",
          "updatedAt": "2024-11-05T13:36:02Z"
        },
        {
          "author": "mwelzl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@chromi points out an important issue here - indeed, with a threshold, the ability to convey only one mark per RTT can be problematic.\r\n\r\nI don't necessarily agree with the proposal though: if precise reporting is available, then why would you want to react to it as strongly as to loss? The RFC 8511 logic: \"ECN marks tells us that this comes from an AQM algorithm, and hence the queue is shorter\" is still true.",
          "createdAt": "2024-11-05T13:36:15Z",
          "updatedAt": "2024-11-05T13:36:15Z"
        },
        {
          "author": "chromi",
          "authorAssociation": "NONE",
          "body": "> @chromi points out an important issue here - indeed, with a threshold, the ability to convey only one mark per RTT can be problematic.\r\n> \r\n> I don't necessarily agree with the proposal though: if precise reporting is available, then why would you want to react to it as strongly as to loss? The RFC 8511 logic: \"ECN marks tells us that this comes from an AQM algorithm, and hence the queue is shorter\" is still true.\r\n\r\nBBR's response to loss is already very gentle, compared to NewReno or CUBIC:\r\n\r\n>    BBR searches for the maximum volume of data that can be sensibly\r\n>    placed in-flight in the network.  A key precondition is that the flow\r\n>    is actually trying robustly to find that operating point.  To\r\n>    implement this, when a flow is in ProbeBW, and an ACK covers data\r\n>    sent in one of the accelerating phases (REFILL or UP), and the ACK\r\n>    indicates that the loss rate over the past round trip exceeds the\r\n>    queue pressure objective, and the flow is not application limited,\r\n>    and has not yet responded to congestion signals from the most recent\r\n>    REFILL or UP phase, then the flow estimates that the volume of data\r\n>    it allowed in flight exceeded what matches the current delivery\r\n>    process on the path, and reduces BBR.inflight_hi:\r\n\r\n>    When encountering packet loss when the flow is not probing for\r\n>    bandwidth, the strategy is to gradually adapt to the current measured\r\n>    delivery process (the rate and volume of data that is delivered\r\n>    through the network path over the last round trip).  This applies\r\n>    generally: whether in fast recovery, RTO recovery, TLP recovery;\r\n>    whether application-limited or not.\r\n\r\n(The above is from \u00a7\u00a7 4.5.10.2-3.)\r\n\r\nIn fact, there's an argument that the response to a CE mark should be **more positive** than to loss.  Loss could have several causes, which motivates BBR's designed insensitivity to modest amounts of packet loss.  A CE mark is unambiguously a congestion signal.",
          "createdAt": "2024-11-05T13:51:20Z",
          "updatedAt": "2024-11-05T13:51:20Z"
        },
        {
          "author": "chromi",
          "authorAssociation": "NONE",
          "body": "Having read and understood a bit more of the specification than before, I think I can revise my proposal as follows:\r\n\r\n- When indication of a CE mark is reflected to the sender, BBR should immediately behave as though the packet loss rate exceeded the sensitivity threshold - that is, `BBRNoteLoss()` should be called and `IsInflightTooHigh()` should return `TRUE`.\r\n\r\nThis does not require any \"precise\" reflection of ECN marks, so it can be used with vanilla TCP.  The effect of a CE mark will be:\r\n\r\n- to terminate any bandwidth probe that BBR is carrying out, and\r\n- to pay more immediate attention to the \"delivery model\", which BBR uses to estimate the path characteristics, in adjusting the send rate and in-flight data volume for the immediate future.\r\n\r\nThis should be very easy to implement, and could also be one of the more straightforward possible modifications of BBR to test.",
          "createdAt": "2024-11-05T15:37:13Z",
          "updatedAt": "2024-11-05T15:37:13Z"
        },
        {
          "author": "mwelzl",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, oh yes, you're right: since an ECN mark is, as you say, unambiguously a congestion signal, not immediately reacting to it (even just one signal/RTT) will cause delay and not help anyone. So this proposal of immediate reaction sounds right to me.",
          "createdAt": "2024-11-05T16:10:21Z",
          "updatedAt": "2024-11-05T16:10:21Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it's important to document a recommended response to ECN in the draft, but I don't have a strong opinion on what that is as long as it performs well in real-world testing.",
          "createdAt": "2024-11-05T18:38:29Z",
          "updatedAt": "2024-11-05T18:38:29Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The authors discussed this further today, and I intend to write a PR to capture that.",
          "createdAt": "2025-02-03T17:51:51Z",
          "updatedAt": "2025-02-03T17:51:51Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOL3MllM6dYrnQ",
      "title": "Do we need inflight_shortterm?",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/8",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When looking at traces, I've found reasoning about when inflight_lo ends up being a limiting factor and when it's not is quite difficult.\r\n\r\nIn general, BBR attempts to create as accurate a model of the network path as possible.  Originally this was bandwidth and min_rtt, then extra acked for aggregation, then inflight_hi for the max BDP of the pipe.\r\n\r\nBecause BBR no longer does packet conservation, I realize there needs to be some sort of short term model, but the current one is quite complex and I'm hoping it could be simpler.\r\n\r\nIn the Google HTTP/3 implementation, we've done some YouTube experiments with ignoring inflight_lo entirely, and it didn't dramatically increase retransmit rate or RTT, and the QoE was slightly improved.  I don't have the data on hand, but it certainly didn't seem to break BBR and it made it much easier to reason about BBR's behavior.\r\n\r\nIt's possible that inflight_lo is critical to certain properties of BBR, in which case it'd be nice to document those.",
      "createdAt": "2024-11-07T09:59:55Z",
      "updatedAt": "2025-03-18T13:01:59Z",
      "closedAt": "2025-03-18T13:01:58Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We discussed this on the editor's call and because inflight_hi is only set at the end of STARTUP and PROBE_UP, if the buffer gets smaller suddenly due to cross traffic or otherwise, BBR will be take a while to reduce inflight.\r\n\r\nOn the other hand, BBR doesn't immediately reduce inflight_hi whenever 2% loss is observed because it could be transitory and go away fairly quickly.",
          "createdAt": "2025-01-10T18:08:16Z",
          "updatedAt": "2025-01-10T18:08:16Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm pretty sure that from first principles we do need inflight_lo or something equivalent, like reducing cwnd directly.\n\nOne way to sketch the argument goes like this:\n\nWhen the bandwidth available to a flow is reduced (e.g., due to more flows competing at the bottleneck or a reduced bottleneck link rate due to radio issues) then this reduces not just the bandwidth available to a flow but also the flow's fair share of the path BDP and bottleneck buffer slots.\n\nThus, to avoid excess queuing and loss, the flow needs to reduce its pacing rate so that matches the lower available bandwidth, and reduce its congestion window to match the lower share of the path BDP and bottleneck buffer slots.\n\nOne might think that it's sufficient to reduce the pacing rate in such cases and leave cwnd unadjusted. But it's very common for ACKs to be delayed in returning to the data sender, due to various aggregation effects (e.g., ACKs waiting for their turn on a wifi network). In such cases, if the flow keeps sending at a reasoanble pacing rate but an unadjusted cwnd, then the extra packets in flight can cause excessive queuing and loss.\n\nIf folks have simulation tests, lab tests, or production data showing that good results are achievable w/o inflight_lo (inflight_shortterm) or equivalent, I'd be interested to hear about this. The tests would need to include cases with multiple BBR flows competing, and BBR flows competing with CUBIC flows, and dynamic numbers of flows competing, to make sure we've examined all the angles.\n\nOr if folks would prefer to go with reducing cwnd directly rather than having a separate inflight_lo/inflight_shortterm, let's discuss that.\n",
          "createdAt": "2025-03-16T16:45:32Z",
          "updatedAt": "2025-03-16T16:49:36Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There were no objections to closing this issue with no action at the CCWG session today, so I'm inclined to do that.",
          "createdAt": "2025-03-18T04:00:01Z",
          "updatedAt": "2025-03-18T04:00:01Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed. Closing. Thanks!\n",
          "createdAt": "2025-03-18T13:01:58Z",
          "updatedAt": "2025-03-18T13:01:58Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOL3MllM6dYtXH",
      "title": "inflight_hi and inflight_lo are confusing names",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/9",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "They're really inflight_longterm and inflight_shortterm or something along those lines.  Also, _hi can be lower than _lo, which is not at all obvious.\r\n\r\nTo be clear, I don't really like inflight_longterm and inflight_shortterm, but maybe inflight_long and inflight_short or something else?",
      "createdAt": "2024-11-07T10:02:42Z",
      "updatedAt": "2025-02-21T19:11:56Z",
      "closedAt": "2025-02-21T19:11:56Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We discussed this on the editors call and agreed that inflight_longterm and inflight_shortterm are less confusing and not overly verbose.",
          "createdAt": "2025-01-10T18:08:56Z",
          "updatedAt": "2025-01-10T18:08:56Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOL3MllM6o8l4X",
      "title": "\"inflight\" or \"in-flight data\" or \"data in flight\"",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/14",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "I believe all 3 are used in the draft today, so we should probably standardize on one.",
      "createdAt": "2025-02-06T03:41:23Z",
      "updatedAt": "2025-05-29T17:57:04Z",
      "closedAt": "2025-05-29T17:57:03Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "RFC9002 typically uses 'in flight' and 'bytes in flight' and 'packets in flight', but occasionally uses in-flight :(\n\nhttps://www.rfc-editor.org/rfc/rfc9002.html\n\nI think 'in flight' is probably best, partially because 'bytes in-flight' and 'packets in-flight' reads oddly to me.",
          "createdAt": "2025-03-16T02:42:27Z",
          "updatedAt": "2025-03-16T02:42:27Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "I am currently a fan of \"inflight\", which is short and sweet, and where we ended up with the current PRR draft: \"inflight: The data sender's best estimate of the number of bytes outstanding in the network.\":\nhttps://datatracker.ietf.org/doc/html/draft-ietf-tcpm-prr-rfc6937bis-13\n\nOr we could use InFlight or something like that, to make it more clear that its a specifically-defined variable?\n",
          "createdAt": "2025-05-21T19:56:30Z",
          "updatedAt": "2025-05-21T19:56:30Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm fine with \"inflight\".\n\nIn this case, I don't see a need to do camel case (ie: InFlight), but I don't have any objection to it.",
          "createdAt": "2025-05-21T20:45:23Z",
          "updatedAt": "2025-05-21T20:45:23Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Re-reading the draft and thinking about the grammatical considerations, AFAIK the following grammatical and semantic considerations are in play:\n\n+ \"in-flight data\" is correct, because in this case \"in-flight\" is\n   an compound adjective describing the data, and compound\n   adjectives are hyphenated\n\n+ \"data in flight\" is correct, because in this case \"in flight\" is \n   an adverbial phrase describing the action or state of the data\n\n+ \"inflight\" as a noun (for the parameter that could be called either\n    \"in-flight data\" or \"data in flight\") is OK, as long as we define\n    what \"inflight\" means\n\nFor a first round of changes (some editorial improvements for \"in flight\" and \"in-flight\"), I mis-remembered the default github action, and forgot to click the radio button to create a pull request, so ended up committing directly to the repo:\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/commit/0ac05f78833a8605b373af9549ca362016857905\n@ianswett and @jbeshay  PTAL and LMK if you would prefer changes to that.\n\nFor a second round of changes (define \"inflight\" and use it more precisely and consistently), I correctly clicked the radio button to create a pull request:\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/41\n",
          "createdAt": "2025-05-25T14:38:03Z",
          "updatedAt": "2025-05-25T14:38:03Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the text reads quite well now.  Do we think we can consider this as closed by #41?",
          "createdAt": "2025-05-29T17:28:29Z",
          "updatedAt": "2025-05-29T17:28:29Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, agreed. Closed by #41 \n",
          "createdAt": "2025-05-29T17:57:03Z",
          "updatedAt": "2025-05-29T17:57:03Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "I_kwDOL3MllM6rDFYL",
      "title": "Impact of increasing ProbeRTT interval to 10s?",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/17",
      "state": "OPEN",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "jbeshay"
      ],
      "labels": [],
      "body": "\nIncreasing ProbeRTT interval to 10s in internet facing connections improves application performance in initial experiments, most probably due to reducing the cwnd dips for connections with long transfers. \n\nI haven't measured its impact on the speed of convergence to a fair of the bandwidth but the 10s value is already used in some of the implementations as well.",
      "createdAt": "2025-02-21T18:15:30Z",
      "updatedAt": "2025-09-10T19:32:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks! We'll try to re-run experiments comparing ProbeRTT interval of 5s vs 10s for our workloads.\n",
          "createdAt": "2025-02-21T20:36:48Z",
          "updatedAt": "2025-02-21T20:36:48Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "NONE",
          "body": "I suspect the experiment results with different cross-traffic will be crucial to understanding the sharing properties of these two configurations, I look forward to seeing the results.\n\nGorry",
          "createdAt": "2025-02-22T14:44:16Z",
          "updatedAt": "2025-02-22T14:44:16Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I expect DASH and HLS video playback may have app-limited behavior more often than 10 seconds, but not always less than every 5 seconds.  Since the app-limited behavior will fully drain the pipe, it will delay the next ProbeRTT.  This is a bit like the app doing ProbeRTT on a timescale of it's choosing rather than BBR choosing when to drain the pipe.\n\nI'm curious what simulations say in this case.",
          "createdAt": "2025-03-16T00:58:01Z",
          "updatedAt": "2025-03-16T00:58:01Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "As I said in Madrid, maybe the Experiment section indicates that 10s is a guess, and a different value (or a dynamic value) are part of the experiment. then the draft can proceed.",
          "createdAt": "2025-07-21T13:23:40Z",
          "updatedAt": "2025-07-21T13:23:40Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "I_kwDOL3MllM6r5v45",
      "title": "HTTP",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/22",
      "state": "CLOSED",
      "author": "crcjs2025",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "[\u0e14\u0e32\u0e27\u0e19\u0e4c\u0e42\u0e2b\u0e25\u0e14.txt](https://github.com/user-attachments/files/19006903/default.txt)\n![Image](https://github.com/user-attachments/assets/83bfe59b-1ec7-497c-8b65-20f42b6f7031)\n[rfc7234.txt.pdf](https://github.com/user-attachments/files/19006904/rfc7234.txt.pdf)\n<!-- Failed to upload \"Bittycoon\\-\\-.zip\" -->\n[/https://www.rfc-editor.org/rfc/rfc9110.html](url)**",
      "createdAt": "2025-02-27T10:10:02Z",
      "updatedAt": "2025-02-27T13:03:51Z",
      "closedAt": "2025-02-27T13:03:51Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "I_kwDOL3MllM6r5wab",
      "title": "HTTP",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/23",
      "state": "CLOSED",
      "author": "crcjs2025",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "[\n\n[\u0e14\u0e32\u0e27\u0e19\u0e4c\u0e42\u0e2b\u0e25\u0e14.txt](https://github.com/user-attachments/files/19006931/default.txt)\n![Image](https://github.com/user-attachments/assets/87e78de3-f52d-4908-87e8-53b06b52ef65)\n![Image](https://github.com/user-attachments/assets/e39c79b5-228f-45ae-850d-6593136fe12c)\n[rfc7234.txt.pdf](https://github.com/user-attachments/files/19006932/rfc7234.txt.pdf)\n\nhttps://www.rfc-editor.org/rfc/rfc9110.html](url)",
      "createdAt": "2025-02-27T10:10:55Z",
      "updatedAt": "2025-02-27T13:03:51Z",
      "closedAt": "2025-02-27T13:03:51Z",
      "comments": []
    },
    {
      "number": 24,
      "id": "I_kwDOL3MllM6r5xBL",
      "title": "Interne",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/24",
      "state": "CLOSED",
      "author": "crcjs2025",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "[\n\n[\u0e14\u0e32\u0e27\u0e19\u0e4c\u0e42\u0e2b\u0e25\u0e14.txt](https://github.com/user-attachments/files/19006947/default.txt)\n![Image](https://github.com/user-attachments/assets/c7683826-12ae-4e14-80c1-37502d648fc2)\n[rfc7234.txt.pdf](https://github.com/user-attachments/files/19006948/rfc7234.txt.pdf)\n\nhttps://www.rfc-editor.org/rfc/rfc9110.html](url)",
      "createdAt": "2025-02-27T10:11:56Z",
      "updatedAt": "2025-02-27T17:41:25Z",
      "closedAt": "2025-02-27T13:03:52Z",
      "comments": [
        {
          "author": "renghardt",
          "authorAssociation": "NONE",
          "body": "Blocked this user from creating more issues in the ietf-wg-ccwg organization",
          "createdAt": "2025-02-27T17:41:24Z",
          "updatedAt": "2025-02-27T17:41:24Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "I_kwDOL3MllM6uNGx4",
      "title": "Bandwidth estimation still uses _seq names, which are TCP-centric",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/26",
      "state": "OPEN",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "I believe the draft is fairly transport agnostic, but the bandwidth estimation section still has some references to end_seq and similar names that don't cleanly translate to QUIC.\n\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/blob/draft-ietf-ccwg-bbr-02/draft-ietf-ccwg-bbr.md#bbrmax_bw-estimated-maximum-bandwidth-bbrmaxbw-estimated-maximum-bandwidth",
      "createdAt": "2025-03-16T00:39:46Z",
      "updatedAt": "2025-07-14T14:52:40Z",
      "closedAt": null,
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "body": "Similar for Section 4.1.2.4 (Detecting application-limited phases):\n```\nCheckIfApplicationLimited():\n    if (C.write_seq - SND.NXT < SND.MSS and\n        C.pending_transmissions == 0 and\n        C.inflight < C.cwnd and\n        C.lost_out <= C.retrans_out)\n      C.app_limited = (C.delivered + C.inflight) ? : 1\n```\n\nIt is not immediately obvious how one would implement this for QUIC.",
          "createdAt": "2025-07-13T03:41:14Z",
          "updatedAt": "2025-07-13T03:41:14Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Similar for Section 4.1.2.4 (Detecting application-limited phases):\n> \n> ```\n> CheckIfApplicationLimited():\n>     if (C.write_seq - SND.NXT < SND.MSS and\n>         C.pending_transmissions == 0 and\n>         C.inflight < C.cwnd and\n>         C.lost_out <= C.retrans_out)\n>       C.app_limited = (C.delivered + C.inflight) ? : 1\n> ```\n> \n> It is not immediately obvious how one would implement this for QUIC.\n\n#57 removes the TCP nomenclature, but adds NoUnsentData().  I think that's a net win, but it's possible more clarification is necessary.",
          "createdAt": "2025-07-14T14:52:40Z",
          "updatedAt": "2025-07-14T14:52:40Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "I_kwDOL3MllM6uhQpu",
      "title": "Should BBR inflight be described in bytes, packets or compatible with both?",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/27",
      "state": "OPEN",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When trying to add consistency by fixing #14 I realized that the text refers to packets in flight.  The Google quiche QUIC implementation of BBR uses bytes, not packets.  I believe the Linux TCP implementation uses packets, and the BSD implementation uses bytes?  I'm unsure what mvfst uses?\n\nPossibly we can define a term at the beginning of the document, ie: \"Inflight\" and define it to be in bytes or packets depending upon the implementation?\n\nI'm a bit worried we'll have unit issues, since bytes and packets are not the same, but I haven't attempted this PR yet.",
      "createdAt": "2025-03-18T10:25:58Z",
      "updatedAt": "2025-05-29T17:27:36Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A few attendees at IETF said they'd prefer bytes, since that's what most implementations use, but obviously Linux does not.",
          "createdAt": "2025-03-20T05:02:06Z",
          "updatedAt": "2025-03-20T05:02:06Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Possibly we could determine a term \"Inflight\" that might be packets or bytes, and use that throughout?\n\nApparently we have 6 instances of 'octets' as well in bandwidth estimation.",
          "createdAt": "2025-04-23T20:42:53Z",
          "updatedAt": "2025-04-23T20:42:53Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Interestingly, it looks like the CUBIC RFC ( https://datatracker.ietf.org/doc/html/rfc9438 ) specifies that cwnd and related quantities are in segments, and has an explicit section about these issues:\n\nhttps://datatracker.ietf.org/doc/html/rfc9438#name-definitions\n\n> The unit of all window sizes in this document is segments of the SMSS, and the unit of all times is seconds. Implementations can use bytes to express window sizes, which would require factoring in the SMSS wherever necessary and replacing segments_acked ([Figure 4](https://datatracker.ietf.org/doc/html/rfc9438#eq4)) with the number of acknowledged bytes.\n\nI would propose for the BBR draft:\n\n+ (a) Like the CUBIC RFC, we should be explicit about units, and either explicitly pick bytes or packets. I would vote to specify the algorithm in terms of bytes (or octets if we want to be very IETF-y about it?), since tracking in bytes is much more correct than packets for cases where packet sizes vary, either due to application write sizes or path MTU changes.\n\n+ (b) Like the CUBIC RFC, we should add a section like that to explain the units, and explain that implementors \"MAY\" use alternate units as long as they do factor in MSS appropriately.\n",
          "createdAt": "2025-04-23T21:25:38Z",
          "updatedAt": "2025-04-23T21:25:38Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm still a fan of specifying the algorithm in terms of:\n\n+ data in units of bytes\n+ data rates in units of bytes/sec\n\nIn meeting discussions today, someone pointed out that inflight, cwnd, C.delivered, and other quantities should be kept in sync in the way that we talk about them.\n\nThere are at least the following variables that are impacted by our decision about units, and where we might want to specify the units:\n\n```\nvolumes of data:\n---\ninflight\ncwnd\nInitialCwnd\nBBR.MinPipeCwnd\nC.delivered\nP.delivered\nP.tx_in_flight\nrs.delivered\nrs.newly_acked\nrs.newly_lost\nrs.tx_in_flight\nrs.lost\nBBR.send_quantum\nBBR.bdp\nBR.inflight_longterm\n\ndata rates (data/time):\n---\nC.pacing_rate\nrs.delivery_rate\nBBR.max_bw\nBBR.bw_shortterm\nBBR.bw\n```\n\n",
          "createdAt": "2025-05-28T21:09:04Z",
          "updatedAt": "2025-05-28T21:09:04Z"
        }
      ]
    },
    {
      "number": 28,
      "id": "I_kwDOL3MllM6u9AbL",
      "title": "Do we need to use \"C.\" in front of connection variables?",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/28",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "The document only describes a single connection, so there's no ambiguity about the connection.\n\nSome variables like is_cwnd_limited don't have a \"C.\" in front of them, but they also seem connection local?",
      "createdAt": "2025-03-20T12:02:37Z",
      "updatedAt": "2025-05-28T20:59:54Z",
      "closedAt": "2025-05-28T20:59:53Z",
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As an implementer, I found the distinction between C.delivered / packet.delivered / rs.delivered helpful in identifying which one we're referring to, especially when they don't appear together in the same line.\n\nThe three other connection state variable names (SMSS, is_cwnd_limited, InitialCwnd) are not reused in the packets or rate samples so there are easier to identify. But for the sake of consistency, I would prefer adding the \"C.\" prefix to all the connection variables. This would also keep it consistent with the rate sampling algorithm where we're using \"C.\" for all connection variables.",
          "createdAt": "2025-04-02T22:24:27Z",
          "updatedAt": "2025-04-02T22:24:27Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Based on discussion, cwnd should be prefixed by BBR. but we want to keep the \"C.\" variable naming and explain the convention at the top.",
          "createdAt": "2025-04-09T20:28:55Z",
          "updatedAt": "2025-04-09T20:28:55Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing with #44 ",
          "createdAt": "2025-05-28T20:59:53Z",
          "updatedAt": "2025-05-28T20:59:53Z"
        }
      ]
    },
    {
      "number": 29,
      "id": "I_kwDOL3MllM6u9CZe",
      "title": "Be consistent about CamelCase vs '_' state variable names",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/29",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "Today, sometimes the draft uses camelcase (ie: InitialCwnd), and sometimes uses lowercase with underscores (ie: is_cwnd_limited).  I don't have a strong preference, but the inconsistency is potentially confusing for readers, because I think the choice of which to use is somewhat arbitrary today?",
      "createdAt": "2025-03-20T12:04:57Z",
      "updatedAt": "2025-05-28T20:59:34Z",
      "closedAt": "2025-05-28T20:59:33Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As discussed, InitialCwnd is more of an initial constant, and is_cwnd_limited is a congestion controller state variable, so making that consistent in the doc would be helpful for readers.",
          "createdAt": "2025-04-23T20:56:03Z",
          "updatedAt": "2025-04-23T20:56:03Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, I think so far the doc was trying to use CamelCase for constants and lower_case_with_underscores for variables. IMHO it seems good to use some kind of scheme that makes it immediately obvious what's a constant and what's a variable, like all-caps for constants (A_CONSTANT_VAL vs a_variable_val), or CamelCase for constants. Thanks!\n",
          "createdAt": "2025-04-23T21:00:58Z",
          "updatedAt": "2025-04-23T21:00:58Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing with #44 ",
          "createdAt": "2025-05-28T20:59:33Z",
          "updatedAt": "2025-05-28T20:59:33Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "I_kwDOL3MllM6vg5rv",
      "title": "Experimental RFCs should have an Experiment",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/31",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "NONE",
      "assignees": [
        "ianswett"
      ],
      "labels": [],
      "body": "Sec 3.2 of RFC 9743 suggests this.\n\nJust a little text about the areas of interest that require more data.",
      "createdAt": "2025-03-24T22:39:58Z",
      "updatedAt": "2025-06-30T12:35:35Z",
      "closedAt": "2025-06-30T12:35:35Z",
      "comments": []
    },
    {
      "number": 32,
      "id": "I_kwDOL3MllM6vg6X_",
      "title": "Clarify C.delivered",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/32",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Sec 2.1 says:\n\n\"C.delivered: The total amount of data (tracked in octets or in packets) delivered so far over the lifetime of the transport connection C.\"\n\nIs this 'unique data' excluding spurious retransmits? Please clarify.",
      "createdAt": "2025-03-24T22:42:22Z",
      "updatedAt": "2025-05-08T15:34:49Z",
      "closedAt": "2025-05-07T20:44:09Z",
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the concept of \"unique data\" is also ambiguous. It depends on how the transport handles retransmissions and how it detects spurious ones. One way around this is to define it in terms of ACKing. I.e., delivered data is acked data at the transport.\n\nIn case of QUIC this would include spurious retransmits because a retransmit is a new packet. For TCP, it wouldn't. ",
          "createdAt": "2025-04-02T22:45:58Z",
          "updatedAt": "2025-04-02T22:45:58Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> In case of QUIC this would include spurious retransmits because a retransmit is a new packet. For TCP, it wouldn't.\n\nAs we discussed in the co-editor meeting just now, my sense is that we can keep it simple and consistent and say that the \"C.delivered SHOULD include spurious retransmits that have been acknowledged as delivered\", or something like that, for any transport.\n\nIMHO it's good for C.delivered to include spurious retransmits, since the network congestion/bandwidth/resource considerations just care about the number of bytes, not the packet/sequence numbers.\n\nYuchung and I discussed this back somtime in 2014-2016, and since that time frame the Linux TCP BBR code has always included spurious retransmissions in the count of delivered data. That code is now in tcp_dsack_seen():\n\n     tcp_dsack_seen()\n     ...\n\t/* A spurious retransmission is delivered */\n\tstate->sack_delivered += dup_segs;\n\ncc: @ianswett @jbeshay",
          "createdAt": "2025-04-23T21:11:52Z",
          "updatedAt": "2025-04-23T21:11:52Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "SGTM. I have no opinion other than the draft clarifies it.",
          "createdAt": "2025-04-23T23:57:53Z",
          "updatedAt": "2025-04-23T23:57:53Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Chatting with @jbeshay we think that https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/40/ addresses the issue noted by @martinduke. Closing for now.  @martinduke please take a look and let us know if this is not sufficient. Thanks!\n",
          "createdAt": "2025-05-07T20:44:09Z",
          "updatedAt": "2025-05-07T20:44:09Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "LGTM",
          "createdAt": "2025-05-08T15:34:49Z",
          "updatedAt": "2025-05-08T15:34:49Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "I_kwDOL3MllM6xMQkN",
      "title": "Document when/why the bandwidth estimator overestimates",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/34",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "Editorial"
      ],
      "body": "And explain that's one reason we limit bandwidth measurements to the send rate.",
      "createdAt": "2025-04-04T15:46:47Z",
      "updatedAt": "2025-06-30T12:35:36Z",
      "closedAt": "2025-06-30T12:35:36Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I found the \"Compression and Aggregation\" section, which notes this fact, and is probably sufficient?\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/blob/main/draft-ietf-ccwg-bbr.md#compression-and-aggregation-compression-and-aggregation",
          "createdAt": "2025-06-19T17:17:48Z",
          "updatedAt": "2025-06-19T17:17:48Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed. That section seems sufficient to me. Thanks!\n",
          "createdAt": "2025-06-22T13:48:34Z",
          "updatedAt": "2025-06-22T13:48:34Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "I_kwDOL3MllM6yOJXl",
      "title": "BBRUpdateAggregationBudget is undefined",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/35",
      "state": "CLOSED",
      "author": "tatsuhiro-t",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "```\nBBRUpdateMaxInflight():\n    BBRUpdateAggregationBudget()\n    inflight = BBRBDPMultiple(BBR.cwnd_gain)\n    inflight += BBR.extra_acked\n    BBR.max_inflight = BBRQuantizationBudget(inflight)\n```\n\nbut `BBRUpdateAggregationBudget` is not defined elsewhere.\n",
      "createdAt": "2025-04-12T01:25:05Z",
      "updatedAt": "2025-04-22T16:02:12Z",
      "closedAt": "2025-04-22T16:01:40Z",
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for catching this!\n\nI think we can remove the BBRUpdateAggregationBudget() line.\n\nThe correct function is BBRUpdateACKAggregation(), and BBRUpdateACKAggregation() is called and defined elsewhere. :-)\n\nSo I think we can just remove the BBRUpdateAggregationBudget() line.\n\ncc: @ianswett @jbeshay \n\n",
          "createdAt": "2025-04-12T12:32:37Z",
          "updatedAt": "2025-04-12T12:32:37Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Proposed a PR to remove the erroneous line: https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/37\n",
          "createdAt": "2025-04-12T12:37:22Z",
          "updatedAt": "2025-04-12T12:37:22Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed with a PR to remove the erroneous line: https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/37\n",
          "createdAt": "2025-04-22T16:02:11Z",
          "updatedAt": "2025-04-22T16:02:11Z"
        }
      ]
    },
    {
      "number": 36,
      "id": "I_kwDOL3MllM6yOOhd",
      "title": "IsInflightTooHigh are defined 2 times and ambiguous to call which",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/36",
      "state": "CLOSED",
      "author": "tatsuhiro-t",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "```\n IsInflightTooHigh():\n    if (IsInflightTooHigh(rs))\n      if (BBR.bw_probe_samples)\n        BBRHandleInflightTooHigh()\n      return true  /* inflight too high */\n    else\n      return false /* inflight not too high */\n\n  IsInflightTooHigh():\n    return (rs.lost > rs.tx_in_flight * BBRLossThresh)\n```\n\nThere are 2 `IsInflightTooHigh` definitions.  I suggest to rename either one to resolve ambiguity.\n",
      "createdAt": "2025-04-12T01:35:50Z",
      "updatedAt": "2025-04-22T19:21:34Z",
      "closedAt": "2025-04-22T19:21:34Z",
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for catching this!\n\nPosted a PR to fix this:\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/38\n\nThis PR removes the first version of IsInflightTooHigh(), which is the incorrect version.\n\ncc: @ianswett @jbeshay \n",
          "createdAt": "2025-04-12T15:04:53Z",
          "updatedAt": "2025-04-12T15:04:53Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "I_kwDOL3MllM64JZ9h",
      "title": "Application-limited detection depends on implementation of pacing",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/42",
      "state": "OPEN",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The tracking of \"application-limited\" status is defined in [4.5.2.2.3. ](https://ietf-wg-ccwg.github.io/draft-ietf-ccwg-bbr/draft-ietf-ccwg-bbr.html#section-4.5.2.2.3)[Tracking application-limited phases](https://ietf-wg-ccwg.github.io/draft-ietf-ccwg-bbr/draft-ietf-ccwg-bbr.html#name-tracking-application-limite). The text suggests detecting a \"bubble\" during which the application fails to send data.\n\nPacing is going to interfere with this detection. If pacing is implemented via some kind of \"leaky bucket\" algorithm, the first effect of the \"bubble\" is to increase the number of tokens available, up to the \"quantum\" value. As long as the available tokens do not exceed the quantum, the transport does not really know whether the opportunity to send is lost, or whether the application is going to send a batch of data that catches up with pacing. In the later case, the transport is not really \"application-limited\".",
      "createdAt": "2025-05-25T18:05:49Z",
      "updatedAt": "2025-05-29T00:31:41Z",
      "closedAt": null,
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "@huitema thanks for filing the issue! I agree that the draft did not adequately specify how pacing fits into detecting application-limited traffic.\n\nThe previous text, \"The sending flow is not currently in the process of transmitting a packet,\" was an imprecise description of the condition that was checked in the Linux TCP stack to handle tracking of application-limited traffic for fq-based pacing. But this text was not precise, and does not correctly capture the checks needed for other pacing implementations.\n\nI have taken a stab at adding a simple specification for how pacing should fit in, in this PR. Please take a look at let me know what you think:\n\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/47\n\nThanks!\n",
          "createdAt": "2025-05-29T00:31:40Z",
          "updatedAt": "2025-05-29T00:31:40Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "I_kwDOL3MllM641bvr",
      "title": "integrate steps for delivery rate samples into BBR pseudocode",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/49",
      "state": "CLOSED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\n@jbeshay in PR #43 noted:\n\n\"we should also integrate the delivery estimate pseudocode a like we do with other parts. I.e. BBR ack processing and packet transmission references restart from idle and model update pseudocode but not rate estimation.\"\n\nFiling this issue so that does not fall through the cracks.\n\ncc: @jbeshay @ianswett \n",
      "createdAt": "2025-05-29T17:35:03Z",
      "updatedAt": "2025-07-03T20:00:55Z",
      "closedAt": "2025-07-03T20:00:55Z",
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closed by #50 ",
          "createdAt": "2025-07-03T20:00:55Z",
          "updatedAt": "2025-07-03T20:00:55Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "I_kwDOL3MllM6-w7Yc",
      "title": "Remove duplicate definitions for output control parameters",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/54",
      "state": "CLOSED",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are duplicate definitions under \"Output Control Parameters\" and \"Control Parameter Overview\"",
      "createdAt": "2025-07-03T19:59:49Z",
      "updatedAt": "2025-07-03T20:50:53Z",
      "closedAt": "2025-07-03T20:50:53Z",
      "comments": []
    },
    {
      "number": 58,
      "id": "I_kwDOL3MllM7ARYrQ",
      "title": "clarify function parameters of `BBRUpdateOnACK`",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/58",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [
        "nealcardwell"
      ],
      "labels": [],
      "body": "`BBRUpdateOnACK` utilizes information about the packets that were acknowledged. I suspect the draft would become easier to implement if it was spelled out explicitly what information is needed, by adding the required function parameters.\n\nOn a related note, `GenerateRateSample` would probably be easier if it returned (instead of updated) the rate sample.",
      "createdAt": "2025-07-12T21:15:55Z",
      "updatedAt": "2025-08-28T04:19:03Z",
      "closedAt": null,
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "body": "It would also be very helpful to spell out if `BBRUpdateOnACK` could be implemented such that it deals with one packet at a time (and would then be called multiple times if the ACK acknowledges multiple packets), or if `BBRUpdateOnACK` necessarily needs to operate on a batch of packets.",
          "createdAt": "2025-07-13T02:27:56Z",
          "updatedAt": "2025-07-13T02:27:56Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "@marten-seemann : I have attempted to clarify these issues in the following PR:\n\n\"clarify implicit C, BBR, RS parameters and relationship of RS and P in stretch ACKs\"\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/83\n\nPlease take a look and see what you think. Thanks!\n\ncc: @ianswett @jbeshay \n\n",
          "createdAt": "2025-08-28T04:18:06Z",
          "updatedAt": "2025-08-28T04:19:03Z"
        }
      ]
    },
    {
      "number": 59,
      "id": "I_kwDOL3MllM7ARjPt",
      "title": "What's the difference between the `C` and the `BBR` struct?",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/59",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The `BBR` struct holds connection-scoped variable, as does the the `C` struct. I might be missing something, but it is not clear to me why these are split into two different structs.",
      "createdAt": "2025-07-12T21:58:22Z",
      "updatedAt": "2025-08-13T18:39:52Z",
      "closedAt": null,
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "They are defined here:\n\n```\nConstant values have CamelCase names and are used by BBR throughout\nits operation for a given connection. Variables have snake_case names.\nAll names are prefixed with the context they\nbelong to: (C) for connection state, (P) for per-packet state, (RS) for\nper-ack rate sample, or (BBR) for the algorithm's internal state.\n```\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/blob/main/draft-ietf-ccwg-bbr.md?plain=1#L281-L285",
          "createdAt": "2025-07-17T21:09:37Z",
          "updatedAt": "2025-07-17T21:09:37Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "body": "I understand `P` and `RS`, but since every connection has exactly one congestion controller, it's not clear to me which variables would go on `BBR` and which one on `C`.",
          "createdAt": "2025-07-17T22:23:49Z",
          "updatedAt": "2025-07-17T22:23:49Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that it's not self-explanatory but here is how I understand it: `C` variables are ones that may/can exist in a transport's connection state regardless of the type of congestion controller being used. For example, some delivery rate sample variables are defined under `C` to keep the the delivery rate estimation independent of BBR. It can technically be used with any other congestion controller.\n\nGenerally, yes, a connection has one congestion controller but it could change or have its state reset (e.g. for quic connection migration). The `C` variables would not be reset in that case, just `BBR`.",
          "createdAt": "2025-07-17T23:04:08Z",
          "updatedAt": "2025-07-17T23:04:08Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "body": "> Generally, yes, a connection has one congestion controller but it could change or have its state reset (e.g. for quic connection migration). The `C` variables would not be reset in that case, just `BBR`.\n\nThis framing makes sense to me, but I'm not sure if it applies here (taking a look at the variables defined in section 2.1):\n* `C.SMSS`: might differ between network interfaces, and therefore not stay constant when migrating to a new path.\n* `C.inflight`: I'm not sure how useful it is to aggregate in-flight bytes across multiple network paths.\n* `C.is_cwnd_limited`: cwnd is a per-path property, hence it can't apply to multiple paths at the same time.\n* `C.delivered` is used to calculate the ACK rate, among others. This seems like a path-dependent property as well.",
          "createdAt": "2025-07-18T21:14:50Z",
          "updatedAt": "2025-07-18T21:14:50Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Maintaining these variables per-path is orthogonal, I'd argue these `C` variables would be `Path` variables in this case rather than `BBR`. \n\nThe idea is that `C` variables are ones that we expect to already exist in the Connection state for use by other parts of the transport or other congestion controllers. For example, the rate estimation algorithm described in the draft can be used independently of BBR. It references only `C` variables.",
          "createdAt": "2025-08-13T18:39:52Z",
          "updatedAt": "2025-08-13T18:39:52Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "I_kwDOL3MllM7ARl2D",
      "title": "`C.delivered` is undefined",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/60",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4.1.2.1.1 doesn't define `C.delivered`. 5.1.1 suggests that it's the number of bytes sent so far.",
      "createdAt": "2025-07-12T22:11:43Z",
      "updatedAt": "2025-07-18T21:05:03Z",
      "closedAt": "2025-07-18T21:05:02Z",
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's defined here: https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/blob/main/draft-ietf-ccwg-bbr.md?plain=1#L301",
          "createdAt": "2025-07-17T21:07:43Z",
          "updatedAt": "2025-07-17T21:07:43Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "body": "Sorry, I must have missed that!",
          "createdAt": "2025-07-18T21:05:02Z",
          "updatedAt": "2025-07-18T21:05:02Z"
        }
      ]
    },
    {
      "number": 61,
      "id": "I_kwDOL3MllM7ARm5M",
      "title": "Should `delivered` be called `bytes_delivered`?",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/61",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "At first glance, I assumed `delivered` was a boolean, but it\u2019s actually the total number of acknowledged bytes. A more descriptive variable name might make this clearer.",
      "createdAt": "2025-07-12T22:16:03Z",
      "updatedAt": "2025-07-30T21:13:28Z",
      "closedAt": null,
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "We discussed this among the co-editors, and our consensus was that it will be better for readability if we don't have the units explicitly mentioned in the many variables that refer to quantities of data, or data rates. So we would prefer to stick with \"delivered\" rather than \"bytes_delivered\",  \"cwnd\" rather than \"cwnd_bytes\", \"inflight\" rather than \"inflight_bytes\", etc.\n\nInstead, our plan is to clarify the canonical units for each quantity in the prose definition of each quantity.\n\nThis should hopefully make the draft a little easier/quicker to read, and provide less cognitive dissonance for implementations that want to use other units for tracking data (e.g., bits or packets instead of bytes).\n\nThis is tracked separately in issue: \"Should BBR inflight be described in bytes, packets or compatible with both?\" issue#27:  https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/27\n",
          "createdAt": "2025-07-30T21:13:28Z",
          "updatedAt": "2025-07-30T21:13:28Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "I_kwDOL3MllM7ARoSV",
      "title": "segment vs packet",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/62",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "The draft uses both \"segments\" and \"packets\", which I assume refer to the same thing. If that\u2019s the case, it would be clearer to settle on a single term. My preference would be \"packet\" (perhaps not surprising, given my QUIC background).",
      "createdAt": "2025-07-12T22:20:01Z",
      "updatedAt": "2025-08-06T20:50:16Z",
      "closedAt": "2025-08-06T20:50:16Z",
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, thanks. We have discussed this among the editors, and the plan is to consolidate the text to use the term \"packet\" rather than \"segment\", since \"segment\" is somewhat TCP-oriented. Thanks!\n",
          "createdAt": "2025-07-30T20:55:35Z",
          "updatedAt": "2025-07-30T20:55:35Z"
        }
      ]
    },
    {
      "number": 63,
      "id": "I_kwDOL3MllM7ARqpa",
      "title": "notation for constants and member variables",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/63",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [
        "jbeshay"
      ],
      "labels": [],
      "body": "The `BBR` struct, as described in the draft, has both member variables (e.g. `BBR.state`) and constants (e.g. `BBR.Beta`). When implementing the algorithm, these are dealt with very differently. I'd suggest using a different notation for constants (maybe just upper-case them without any prefix, e.g. `BETA`)?",
      "createdAt": "2025-07-12T22:27:38Z",
      "updatedAt": "2025-08-20T20:49:36Z",
      "closedAt": null,
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "```\nConstant values have CamelCase names and are used by BBR throughout\nits operation for a given connection. Variables have snake_case names.\nAll names are prefixed with the context they\nbelong to: (C) for connection state, (P) for per-packet state, (RS) for\nper-ack rate sample, or (BBR) for the algorithm's internal state.\n```\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/blob/main/draft-ietf-ccwg-bbr.md?plain=1#L281-L285\n\nDoes this address the notation suggestion? There is value in namespacing the constants with the C/rs/BBR prefixes.\n",
          "createdAt": "2025-07-17T21:06:51Z",
          "updatedAt": "2025-07-17T21:06:51Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "body": "I didn't see any constants for `C` or `RS` (only `BBR`), but I might have missed something. I can live with them being camel-case though, although I was slightly surprised by this choice.",
          "createdAt": "2025-07-17T22:27:28Z",
          "updatedAt": "2025-07-17T22:27:28Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, there are no constants for `RS`. For `C`, there is `C.InitialCwnd` and `C.SMSS`. ",
          "createdAt": "2025-07-17T23:06:21Z",
          "updatedAt": "2025-07-17T23:06:21Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "I_kwDOL3MllM7ARrlx",
      "title": "`BBR.extra_acked_filter` is unused",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/64",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [
        "jbeshay"
      ],
      "labels": [],
      "body": "Seciton 2.12 defines `BBR.extra_acked_filter`, but it isn't used anywhere.",
      "createdAt": "2025-07-12T22:32:01Z",
      "updatedAt": "2025-08-27T20:40:56Z",
      "closedAt": "2025-08-27T20:40:56Z",
      "comments": []
    },
    {
      "number": 65,
      "id": "I_kwDOL3MllM7ARs3u",
      "title": "What are filters?",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/65",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [
        "jbeshay"
      ],
      "labels": [
        "Editorial"
      ],
      "body": "I\u2019m confused about the filters used throughout the document. For example, `UpdateWindowedMaxFilter` is used multiple times, but it\u2019s never defined.\n\nAdditionally, several invocations refer to filters like `BBR.MaxBwFilter` and `BBR.ExtraACKedFilter`, which also lack definitions. Some clarification or inclusion of these definitions would be helpful.",
      "createdAt": "2025-07-12T22:36:42Z",
      "updatedAt": "2025-08-27T20:40:56Z",
      "closedAt": "2025-08-27T20:40:56Z",
      "comments": []
    },
    {
      "number": 66,
      "id": "I_kwDOL3MllM7ARydg",
      "title": "What does tracking state per aggregate mean?",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/66",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [
        "nealcardwell"
      ],
      "labels": [],
      "body": "Section 4.1.3.1 says:\n> If a transport sender implementation uses an offload mechanism (such as TSO, GSO, etc.) to combine multiple C.SMSS of data into a single packet \"aggregate\" for the purposes of scheduling transmissions, then it is RECOMMENDED that the per-packet state be tracked for each packet \"aggregate\" rather than each SMSS. For simplicity this document refers to such state as \"per-packet\", whether it is per \"aggregate\" or per C.SMSS.\n\nIf I understand correctly, I only need to track 3 variables per packet (section 2.2):\n* the departure time\n* the number of delivered bytes at the time the packet was sent\n* the number of bytes in flight at the time the packet was sent\n\nThe first one is easy: obviously, the departure time for packets sent in a batch is the same.\n\nDoes this mean that when I send a GSO batch, one should set the number of delivered bytes and the number of bytes in flight for each packet sent in that batch to the value _before sending the entire batch_?",
      "createdAt": "2025-07-12T22:57:32Z",
      "updatedAt": "2025-09-10T20:50:56Z",
      "closedAt": "2025-09-10T20:50:56Z",
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> Does this mean that when I send a GSO batch, one should set the number of delivered bytes and the number of bytes in flight for each packet sent in that batch to the value before sending the entire batch?\n\nI have tried to clarify this in the following PR:\n\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/81\n\nThe answer is that after transmitting the packet the P.foo fields should be filled in, including setting P.tx_in_flight to the value of C.inflight after the P is sent.\n\nAnd the P can be either a single C.SMSS or an offload batch/burst/aggregate of multiple C.SMSS packets.\n\nPlease take a look at https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/81 and let us know what you think.\n\nThanks!\n\ncc: @ianswett @jbeshay \n",
          "createdAt": "2025-08-28T02:40:29Z",
          "updatedAt": "2025-08-28T02:40:29Z"
        }
      ]
    },
    {
      "number": 67,
      "id": "I_kwDOL3MllM7ASSkD",
      "title": "What is `BBR.offload_budget` for QUIC?",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/67",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [
        "ianswett"
      ],
      "labels": [],
      "body": "Section 5.5.8 defines the `BBR.offload_budget` for TCP. What would one use for QUIC?",
      "createdAt": "2025-07-13T02:08:39Z",
      "updatedAt": "2025-07-17T21:38:57Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 68,
      "id": "I_kwDOL3MllM7ASZYQ",
      "title": "Per-Packet and Connection State variables are spread across multiple Sections",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/68",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "Section 2.1 and section 4.1.2.1.1 define connection state. Similarly, per-packet state is defined in both section 2.2 and section 4.1.2.1.2.\n\nI assume this split exists to highlight that the some variables are only used by the Delivery Rate Sampling Algorithm, but I think it would be helpful to see all the state in one place. If the intention is to keep these separate, I'd argue that section 2.1 should link to 4.1.2.1.1 and say something like:\n> More per-connection variables used for the Delivery Rate Sampling Algorithm are defined in section 4.1.2.1.1.",
      "createdAt": "2025-07-13T02:52:07Z",
      "updatedAt": "2025-07-17T21:46:56Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 69,
      "id": "I_kwDOL3MllM7ASaOM",
      "title": "Section 5.5.9 sounds very TCP-specific",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/69",
      "state": "OPEN",
      "author": "marten-seemann",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "> The BBR.extra_acked thus reflects the recently-measured magnitude of data and ACK aggregation effects such as batching and slotting at shared-medium L2 hops (wifi, cellular, DOCSIS), as well as end-host offload mechanisms (TSO, GSO, LRO, GRO), and end host or middlebox ACK decimation/thinning.\n\nMiddlebox ACK decimation is not possible when using QUIC. Instead, RFC 9002 requires that at least every other ack-eliciting packet elicits a fresh ACK frame.\n\nIt would be very useful if this section could give some guidance on how to use the [QUIC ACK-FREQUENCY](https://datatracker.ietf.org/doc/draft-ietf-quic-ack-frequency/) extension, which allows the sender to control how frequently the receiver sends an ACK frame.",
      "createdAt": "2025-07-13T02:57:07Z",
      "updatedAt": "2025-08-18T04:01:57Z",
      "closedAt": null,
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Good points.\n\nFrom our co-editor meeting, consensus is that we should have some light wording about the fact that a sender MAY incorporate the ACK frequency into the extra_acked estimate.\n\nBut even if this is not done, the automatic measurement of extra_acked should pick up the dynamics an RTT later or so.\n",
          "createdAt": "2025-07-17T21:46:55Z",
          "updatedAt": "2025-07-17T21:46:55Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "body": "My point was that the ACK Frequency extension allows the sender to request certain acknowledgment behavior on the receiver side. I was wondering if it would be appropriate for this document to give some advice on how to tune these parameters.",
          "createdAt": "2025-07-18T15:41:12Z",
          "updatedAt": "2025-07-18T15:41:12Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> My point was that the ACK Frequency extension allows the sender to request certain acknowledgment behavior on the receiver side. I was wondering if it would be appropriate for this document to give some advice on how to tune these parameters.\n\n@marten-seemann by \"these parameters\" do you mean the ACK_FREQUENCY frame parameters from https://datatracker.ietf.org/doc/html/draft-ietf-quic-ack-frequency-11#section-4 ?\n\n",
          "createdAt": "2025-08-17T18:41:50Z",
          "updatedAt": "2025-08-17T18:41:50Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "body": "Yes.",
          "createdAt": "2025-08-18T04:01:57Z",
          "updatedAt": "2025-08-18T04:01:57Z"
        }
      ]
    },
    {
      "number": 71,
      "id": "I_kwDOL3MllM7BqS0r",
      "title": "Consider adding test cases to an appendix",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/71",
      "state": "OPEN",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Today in CCWG there was interest in example test cases of some form for BBR, so implementers could ensure they implemented it correctly.\n\nQLog was mentioned as a common logging framework for QUIC that could be used for congestion control debugging and might allow implementations to compare traces.",
      "createdAt": "2025-07-21T15:22:28Z",
      "updatedAt": "2025-09-11T21:13:37Z",
      "closedAt": null,
      "comments": [
        {
          "author": "toidiu",
          "authorAssociation": "NONE",
          "body": "Hello \ud83d\udc4b . I am working at Cloudflare and using a `tc` based simulator to test our implementation. I had some thoughts and wanted to see if there was interest and if folks agree.\n\n**Short term**\nWhat I would find very useful right now would a graph (rtt, bytes in flight, throughput, cwnd) in the baseline case (some delay + some rate limiting). A common format such as qlog might be preferred but that depending on your qlog support.\n\nAlso should we expect different behavior at low RTTs vs high RTTs and test these separately? So far my test has been with an RTT of 100ms and a rate of 20mbit.\n\n**Long term**\nI think what we might want is the following 3 things:\n- A common simulated setup (this is important) +\n- Workload description (e.g. download 20MB) +\n- Results (qlog seems like a very good candidate for a common format)\n\nEventually we could include more \"interesting\"/\"real world\" scenarios (loss, jitter, multiple flows, packet reordering, etc.) so that implementations can validate how the algorithm performs in the edge cases.",
          "createdAt": "2025-09-04T19:38:32Z",
          "updatedAt": "2025-09-04T19:38:32Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think it's worth having some tests at low (ie: 1 or 5ms) RTTs, because some implementers have seen issues at low RTTs in the past.\n\nFor the same test case, I expect there to be subtle differences between different implementations and particularly between QUIC and TCP, but if you're saying it'd be useful to have qlog or some equivalent data for some standard scenarios from different implementations, then I think that should be doable?  That being said, the Google QUICHE BBR implementation doesn't support qlog today.",
          "createdAt": "2025-09-11T21:13:37Z",
          "updatedAt": "2025-09-11T21:13:37Z"
        }
      ]
    },
    {
      "number": 73,
      "id": "I_kwDOL3MllM7E0G12",
      "title": "Mention the possibility of triggering PROBE_RTT on a known path change",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/73",
      "state": "OPEN",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "There are circumstances it's known a path change has occurred.  Starlink apparently can change paths at 15 second intervals and a cell phone might know when it's changed network types/etc.\n\nIn this case, if the RTT decreased, that should be observed quickly, but if it increased, it might be necessary to measure a new min_rtt, otherwise the CWND could be far too small.",
      "createdAt": "2025-08-07T21:55:57Z",
      "updatedAt": "2025-08-07T21:55:57Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 75,
      "id": "I_kwDOL3MllM7HCiDO",
      "title": "fix P.sent_time vs P.departure_time inconsistency",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/75",
      "state": "CLOSED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "nealcardwell"
      ],
      "labels": [],
      "body": "The BBR draft currently uses  P.sent_time and P.departure_time to refer to the same quantity. This is due to the P.departure_time originating from the BBR CC draft and the P.sent_time originating from the rate sampling draft.\n\nWe should clean these up and make them consistent.\n\nCurrently we have:\n\n+ P.sent_time (rate sampling pseudocode; 8 places)\n+ P.departure_time (BBR/pacing pseudocode; 4 occurrences)\n\nI'm proposing to change \"sent\" and \"departure\" to both be \"send\".\n\ns/.sent/.send/\ns/_sent/_send/\ns/.departure/.send/\ns/_departure/_send/\n\nThis should make things like this:\n```\n  send_elapsed = (P.sent_time - P.first_sent_time)\n```\n\nA little easier to read, like this:\n```\n  send_elapsed = (P.send_time - P.first_send_time)\n```\n\n\nIn addition we have:\n\n+ BBR.next_departure_time (BBR/pacing pseudocode; 7 occurrences)\n\nI'm proposing to move this to the C \"struct\", since the pacing mechanism should ideally be independent of CC:\n\ns/BBR.next_departure_time/C.next_send_time/\n\ncc: @ianswett @jbeshay \n",
      "createdAt": "2025-08-20T19:42:12Z",
      "updatedAt": "2025-08-27T20:44:41Z",
      "closedAt": "2025-08-27T20:44:40Z",
      "comments": []
    },
    {
      "number": 77,
      "id": "I_kwDOL3MllM7HC1oL",
      "title": "set P.tx_in_flight",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/77",
      "state": "CLOSED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "nealcardwell"
      ],
      "labels": [],
      "body": "P.tx_in_flight is defined, and read in BBRHandleLostPacket() pseudocode, but there is no pseudocode to set P.tx_in_flight.\n\nThe line to set P.tx_in_flight should go in OnPacketSent() (that's the way it works in the Linux TCP BBR code).\n\ncc: @ianswett @jbeshay \n",
      "createdAt": "2025-08-20T20:08:45Z",
      "updatedAt": "2025-08-27T20:37:31Z",
      "closedAt": "2025-08-27T20:37:31Z",
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOL3MllM52vZRc",
      "title": "fix: correct misspelling \"que\" to \"queue\"",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/1",
      "state": "MERGED",
      "author": "spmzt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This pull request corrects a misspelling of the word 'queue'.",
      "createdAt": "2024-07-29T12:40:23Z",
      "updatedAt": "2024-07-29T13:06:34Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "0f46affa058bdd125291f4a46098534f93cb4140",
      "headRepository": "spmzt/draft-cardwell-ccwg-bbr",
      "headRefName": "main",
      "headRefOid": "c3754e8f9c1e83a63352d658738e990c97e98a42",
      "closedAt": "2024-07-29T13:06:34Z",
      "mergedAt": "2024-07-29T13:06:34Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "fbb5bc1beebd3507f12397f481833521f4c095d5"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 2,
      "id": "PR_kwDOL3MllM55Bily",
      "title": " Remove secs inside pseudocode of BBRPickProbeWait ",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/2",
      "state": "CLOSED",
      "author": "spmzt",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This pull request removes the non-pseudocode keyword 'secs'.\r\nI think the keyword 'secs' was unnecessary and not part of the pseudocode structure.",
      "createdAt": "2024-08-21T18:48:27Z",
      "updatedAt": "2024-10-21T16:03:33Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "a9eb2f4f3649ce174503765d79565e1c6e65cb03",
      "headRepository": "spmzt/draft-cardwell-ccwg-bbr",
      "headRefName": "main",
      "headRefOid": "bd160b2ee252822f2cd34e948ba17a405d199b7e",
      "closedAt": "2024-10-21T16:03:33Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "spmzt",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done.",
          "createdAt": "2024-08-24T23:42:39Z",
          "updatedAt": "2024-08-24T23:42:39Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks! Merged here, after rebasing to apply to the .md:\r\n\r\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/commit/4159875aa93802a5603b5b75d61e28b70086bbd2\r\n\r\nAlso added you to the Acknowledgments:\r\n\r\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/commit/871539f6c9e8561fc77578c37f6f33e890797c8f\r\n",
          "createdAt": "2024-10-21T16:03:33Z",
          "updatedAt": "2024-10-21T16:03:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6Glt7N",
          "commit": {
            "abbreviatedOid": "975628f"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-23T20:16:08Z",
          "updatedAt": "2024-08-23T20:18:01Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This \"que\" seems like it has already been fixed? Please rebase your patch series onto the latest version of the draft. Thanks!\r\n",
              "createdAt": "2024-08-23T20:16:08Z",
              "updatedAt": "2024-08-23T20:18:01Z"
            },
            {
              "originalPosition": 4,
              "body": "It seems like the removal of \"secs\" is the contribution here?\r\n\r\nCan you please rebase your commit onto the latest draft commits, and squash your commits into a single commit that makes this change? Thanks!\r\n",
              "createdAt": "2024-08-23T20:17:58Z",
              "updatedAt": "2024-08-23T20:18:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6Gl05r",
          "commit": {
            "abbreviatedOid": "975628f"
          },
          "author": "spmzt",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-08-23T20:37:13Z",
          "updatedAt": "2024-08-23T20:37:13Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Ok",
              "createdAt": "2024-08-23T20:37:13Z",
              "updatedAt": "2024-08-23T20:37:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6NSCRY",
          "commit": {
            "abbreviatedOid": "bd160b2"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-10-15T18:59:53Z",
          "updatedAt": "2024-10-15T18:59:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 3,
      "id": "PR_kwDOL3MllM58OHZQ",
      "title": "Language clarifications",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/3",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Minor clarifications to the prose\r\n- Removes explicit references to Youtube",
      "createdAt": "2024-09-20T22:35:22Z",
      "updatedAt": "2024-10-21T21:57:31Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "871539f6c9e8561fc77578c37f6f33e890797c8f",
      "headRepository": "jbeshay/draft-ietf-ccwg-bbr",
      "headRefName": "20240920",
      "headRefOid": "acbd8ca5e1f58ba8c23ae8d392bccb0d378ea6a3",
      "closedAt": "2024-10-21T21:57:23Z",
      "mergedAt": "2024-10-21T21:57:23Z",
      "mergedBy": "jbeshay",
      "mergeCommit": {
        "oid": "b912be6cbc3ffec98692d4acd5da9067f3237611"
      },
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I am going to redo this on top of the markdown version.\r\ncc @nealcardwell @ianswett ",
          "createdAt": "2024-10-17T04:41:48Z",
          "updatedAt": "2024-10-17T04:41:48Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, this 4-commit version with purely editorial changes looks great to merge now. Thanks!\r\n",
          "createdAt": "2024-10-21T20:27:21Z",
          "updatedAt": "2024-10-21T20:27:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6KcVOy",
          "commit": {
            "abbreviatedOid": "9571b36"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks! Mostly looks great. I had one question and one quick suggestion.\r\n\r\ncc: @ianswett\r\n",
          "createdAt": "2024-09-23T15:42:24Z",
          "updatedAt": "2024-09-23T15:55:06Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "I agree it would be great to simplify this ack_phase stuff... But AFAICT this has a bug: in a particular ProbeBW_DOWN episode, before a round trip in ProbeBW_DOWN elapses (before BBR.round_start becomes true),  BBRIsTimeToCruise() may return true if inflight is less than the estimated BDP. So this expression may never be true, and the BBRAdvanceMaxBwFilter() may never be called. WDYT?\r\n",
              "createdAt": "2024-09-23T15:42:24Z",
              "updatedAt": "2024-09-23T15:55:06Z"
            },
            {
              "originalPosition": 5,
              "body": "Looks like this 0.35 value occurs a second time, lower in the text:\r\n\r\n    It uses a pacing_gain of BBRDrainPacingGain = 0.35\r\n\r\nLet's change that one as well. Perhaps we should remove the discussion of the exactly value in that other spot, so we don't have this kind of potential disagreement in the text in the future. How about:\r\n\r\nold:\r\n\r\n      It uses a pacing_gain of BBRDrainPacingGain = 0.35, chosen...\r\n\r\nproposed:\r\n\r\n      It uses a pacing_gain of BBRDrainPacingGain, with a value chosen ...\r\n",
              "createdAt": "2024-09-23T15:47:49Z",
              "updatedAt": "2024-09-23T15:55:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6KomE2",
          "commit": {
            "abbreviatedOid": "9d31d2e"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-09-24T17:11:16Z",
          "updatedAt": "2024-09-24T17:11:17Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Good point. One way to avoid the bug is to advance the cycle when entering ProbeBW_DOWN if the transport isn't app limited. That's the approach I've taken in mvfst. ",
              "createdAt": "2024-09-24T17:11:17Z",
              "updatedAt": "2024-09-24T17:11:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6NSCzk",
          "commit": {
            "abbreviatedOid": "9571b36"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "TBH, I think sent and transmitted are equivalent and sent is shorter, so unless there's a clear definition of one vs the other, I prefer sent.",
          "createdAt": "2024-10-15T19:01:04Z",
          "updatedAt": "2024-10-16T02:00:46Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n<t>Variables for connection state (C), per-packet state (P), or per-ACK rate sample (rs) that are not defined below are defined in <xref target=\"delivery-rate-samples\"/> \"Delivery Rate Samples\".</t>\r\n```",
              "createdAt": "2024-10-15T19:01:04Z",
              "updatedAt": "2024-10-16T02:00:46Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n<t>BBR's state machine uses two control mechanisms: the pacing_gain and the cwnd. Primarily, it uses the pacing_gain (see the \"Pacing Rate\" section), which controls how fast packets are sent relative to BBR.bw. A pacing_gain &gt; 1 decreases inter-packet time and increases inflight. A pacing_gain &lt; 1 has the opposite effect, increasing inter-packet time and while aiming to decrease inflight. The cwnd is sufficiently larger than the BDP to allow the higher pacing gain to accumulate more packets in flight. Only if the state machine needs to quickly reduce inflight to a particular absolute value, it uses the cwnd.</t>\r\n```",
              "createdAt": "2024-10-16T01:47:21Z",
              "updatedAt": "2024-10-16T02:00:46Z"
            },
            {
              "originalPosition": 53,
              "body": "```suggestion\r\n<t>Upon starting a full pipe detection process (either on startup or when probing for an increase in bandwidth), the following steps are taken:</t>\r\n```",
              "createdAt": "2024-10-16T01:47:56Z",
              "updatedAt": "2024-10-16T02:00:46Z"
            },
            {
              "originalPosition": 62,
              "body": "Maybe we should define what a 'round' is above and use that here and elsewhere?",
              "createdAt": "2024-10-16T01:48:43Z",
              "updatedAt": "2024-10-16T02:00:46Z"
            },
            {
              "originalPosition": 62,
              "body": "I thought the 3 round number was due to a number of issues, including receive window auto-tuning.  This text seems to be assuming a certain auto-tuning behavior, which I'm a bit uncomfortable with given it's implementation dependent.\r\n\r\n```suggestion\r\n<t>BBR waits three packet-timed round trips to have solid evidence that the sender is not detecting a delivery-rate plateau that was temporarily imposed by the receive window or temporary congestion. Allowing three rounds provides time for the receiver's receive-window auto-tuning to open up the receive window and for the BBR sender to realize that BBR.max_bw should be higher: in the first round the receive-window auto-tuning algorithm grows the receive window; in the second round the sender fills the higher receive window; in the third round the sender gets higher delivery-rate samples. This three-round threshold was validated by experimental data.</t>\r\n```",
              "createdAt": "2024-10-16T01:51:54Z",
              "updatedAt": "2024-10-16T02:00:46Z"
            },
            {
              "originalPosition": 125,
              "body": "```suggestion\r\n<t>Delivery rate samples are generated upon receiving ACKs; Losing an ACK results in losing the delivery rate sample, and instead generating a delivery rate sample from a subsequent ACK. Lost ACKs can underestimate the delivery rate due the artificially inflated \"rs.interval\". The impact of this effect is mitigated using the BBR.max_bw filter. </t>\r\n```",
              "createdAt": "2024-10-16T01:59:15Z",
              "updatedAt": "2024-10-16T02:00:46Z"
            },
            {
              "originalPosition": 134,
              "body": "This is TCP centric, FYI.  Also, I don't think we care about the performance of BBR without SACK?",
              "createdAt": "2024-10-16T02:00:33Z",
              "updatedAt": "2024-10-16T02:00:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6NVEJt",
          "commit": {
            "abbreviatedOid": "9571b36"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T03:36:55Z",
          "updatedAt": "2024-10-16T03:36:55Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "We could remove the description of the specific receive window tuning behavior.\r\n```suggestion\r\n<t>BBR waits three packet-timed round trips to have reasonable evidence that the sender is not detecting a delivery-rate plateau that was temporarily imposed by congestion or receive-window auto-tuning. This three-round threshold was validated by experimental data to allow the receiver the chance to grow its receive window.</t>\r\n```",
              "createdAt": "2024-10-16T03:36:55Z",
              "updatedAt": "2024-10-16T03:36:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6NVEjI",
          "commit": {
            "abbreviatedOid": "9571b36"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-16T03:39:13Z",
          "updatedAt": "2024-10-16T03:39:13Z",
          "comments": [
            {
              "originalPosition": 125,
              "body": "I will use your suggestion, changing the casing of `losing` after `ACKs;`\r\n```suggestion\r\n<t>Delivery rate samples are generated upon receiving ACKs; losing an ACK results in losing the delivery rate sample, and instead generating a delivery rate sample from a subsequent ACK. Lost ACKs can underestimate the delivery rate due the artificially inflated \"rs.interval\". The impact of this effect is mitigated using the BBR.max_bw filter. </t>\r\n```",
              "createdAt": "2024-10-16T03:39:13Z",
              "updatedAt": "2024-10-16T03:39:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6ODeZI",
          "commit": {
            "abbreviatedOid": "acbd8ca"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Text LG, but we should decide if we want to impose the line limits I've seen in other Github IETF projects.",
          "createdAt": "2024-10-21T20:46:22Z",
          "updatedAt": "2024-10-21T20:47:01Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "The text LG, but usually we reflow markdown to ~80 character lines, at least in my experience.",
              "createdAt": "2024-10-21T20:46:22Z",
              "updatedAt": "2024-10-21T20:47:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6OD1rG",
          "commit": {
            "abbreviatedOid": "acbd8ca"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-21T21:49:37Z",
          "updatedAt": "2024-10-21T21:49:37Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "I prefer 80 character lines as well. It should make it easier to have smaller, easy-to-review diffs. And make it easier to view/edit as well.\r\n\r\n@jbeshay - if you have time to reformat to 80 characters, that's great.\r\n\r\nSince we're on a deadline, I'm OK with merging this version now and I can reformat as a follow-up if you want.\r\n\r\n",
              "createdAt": "2024-10-21T21:49:37Z",
              "updatedAt": "2024-10-21T21:49:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6OD3zT",
          "commit": {
            "abbreviatedOid": "acbd8ca"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-10-21T21:56:54Z",
          "updatedAt": "2024-10-21T21:56:55Z",
          "comments": [
            {
              "originalPosition": 65,
              "body": "Sounds good. I'll merge this now then. I will push the reformat to 80 characters later tonight.",
              "createdAt": "2024-10-21T21:56:55Z",
              "updatedAt": "2024-10-21T21:56:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 5,
      "id": "PR_kwDOL3MllM5_WnhG",
      "title": "Remove BBR.ack_phase from pseudocode",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/5",
      "state": "OPEN",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We don't need to explicitly track the ack_phase in order to advance MaxBWFilter. Instead, we can advance it when entering ProbeBW_Down.\r\n\r\nThis logic is currently used in Mvfst. ",
      "createdAt": "2024-10-21T17:14:29Z",
      "updatedAt": "2025-08-06T20:48:37Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "871539f6c9e8561fc77578c37f6f33e890797c8f",
      "headRepository": "jbeshay/draft-ietf-ccwg-bbr",
      "headRefName": "remove_ack_phase",
      "headRefOid": "ee98c12ad6f0e93153656218a7df1b1ef92618d7",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 6,
      "id": "PR_kwDOL3MllM5_WrsD",
      "title": "Use consistent value for drain pacing gain which matches derivation doc",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/6",
      "state": "OPEN",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The drain gain value is inconsistent. The derivation doc linked (https://github.com/google/bbr/blob/master/Documentation/startup/gain/analysis/bbr_drain_gain.pdf) suggests using 0.5 and that's the value referenced in the table under (Summary of Control Behavior in the State Machine).  0.35 (~ 1 / StartupPacingGain) is used in a couple of other places.\r\n\r\nThis PR changes it to 0.5 everywhere. \r\n\r\nExisting implementations are using 0.35 ([Linux TCP](https://github.com/google/bbr/blob/v3/net/ipv4/tcp_bbr.c#L221C46-L221C51), [Quiche](https://github.com/google/quiche/blob/73107195dfbe8f0a531d3e2f052c9f2e15ec0e3c/quiche/quic/core/congestion_control/bbr2_misc.h#L111), [Mvfst](https://github.com/facebook/mvfst/blob/main/quic/congestion_control/Bbr2.cpp#L27)). The 0.5 value can be regarded as an upper bound. \r\n\r\nThis PR will keep the value consistent in the draft while we test the impact of the changing it to 0.5.",
      "createdAt": "2024-10-21T17:24:45Z",
      "updatedAt": "2024-11-04T15:59:55Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "bbc5137f505b65c4063296e52f13d930ccfa3eb8",
      "headRepository": "jbeshay/draft-ietf-ccwg-bbr",
      "headRefName": "drain_gain",
      "headRefOid": "7a56fb259117a8ccac4868cf50fc44290a7aa169",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "As one data point, we have performance A/B experiment data from Linux TCP YouTube experiments. The main performance changes were:\r\n\r\n+ 0.5x has slightly slower video play start-up\r\n+ 0.5x has slightly more rebuffers\r\n",
          "createdAt": "2024-11-01T17:04:44Z",
          "updatedAt": "2024-11-01T17:04:44Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As with all things in BBR, one change can be better or worse depending upon another.  Do we think there's a chance exit from STARTUP will get faster?  If so, draining the pipe quickly might be less important?\r\n\r\nAlternatively, we could adopt the stance that the drain pacing gain should be based on the STARTUP pacing gain, not the CWND gain, because ideally BBR is largely rate/pacing limited and not CWND limited?",
          "createdAt": "2024-11-04T00:45:07Z",
          "updatedAt": "2024-11-04T00:45:07Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": ">  Do we think there's a chance exit from STARTUP will get faster? If so, draining the pipe quickly might be less important?\r\n\r\nChanging the drain pacing gain is used after we've already decided to exit startup, so I don't see how this change can impact startup.\r\n\r\n> Alternatively, we could adopt the stance that the drain pacing gain should be based on the STARTUP pacing gain, not the CWND gain\r\n\r\nThe cwnd gain is used in the referenced [derivation doc](https://github.com/google/bbr/blob/master/Documentation/startup/gain/analysis/bbr_drain_gain.pdf) in the assumption about the inflight volume at the beginning of DRAIN: \r\n```\r\nstarting_inflight = BBRStartupCwndGain * bw * min_rtt\r\n```\r\nSwitching this to the StartupPacingGain will give us a value for inflight that Startup can't actually achieve, so we'll try to drain more aggressively (0.35 vs. 0.5) and end up draining in under 1 rtt consistently. My hypothesis is that the shorter drain duration is probably behind the better startup and lower rebuffers in test that we lose with 0.5 due to longer drain.\r\n\r\n> because ideally BBR is largely rate/pacing limited and not CWND limited?\r\n\r\nOn this, I think it applies at the beginning of Startup and throughout ProbeBW. But when Startup has reached the delivery rate plateau, BBR should be cwnd limited since StartupPacingGain > StartupCwndGain. Is my reasoning correct here?",
          "createdAt": "2024-11-04T15:38:04Z",
          "updatedAt": "2024-11-04T15:38:04Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "I (@nealcardwell) said:\r\n> As one data point, we have performance A/B experiment data from Linux TCP YouTube experiments. The main performance changes were:\r\n\r\nLooking again at these results, Ian has pointed out that it's unclear if those results were statistically significant.\r\n\r\nI've updated the slides to say:\r\n\r\n```\r\n+ Have some performance A/B experiment data from Linux TCP YouTube experiments:\r\n  + Unclear if there are statistically significant performance regressions\r\n  + Would like to re-run an experiment to ensure there are no regressions\r\n```\r\n\r\n@ianswett said:\r\n> Alternatively, we could adopt the stance that the drain pacing gain should be based on the STARTUP pacing gain, not the CWND gain, because ideally BBR is largely rate/pacing limited and not CWND limited?\r\n\r\nI'm pretty sure that the pacing gain in Drain should be 1/startup_cwnd_gain, based on:\r\n\r\n(1) the derivation:\r\nhttps://github.com/google/bbr/blob/master/Documentation/startup/gain/analysis/bbr_drain_gain.pdf\r\n\r\n(2) the traces, where we see clearly that in STARTUP typically there is a large standing queue for several round trips, whose magnitude is controlled by startup_cwnd_gain:\r\nhttps://www.ietf.org/proceedings/97/slides/slides-97-iccrg-bbr-congestion-control-02.pdf#page=16\r\n\r\n---\r\n\r\nOverall, personally I'm strongly inclined to change the drain pacing gain from 0.346 to 0.5 for a number of reasons:\r\n\r\n(1) consistency with the derivation:\r\nhttps://github.com/google/bbr/blob/master/Documentation/startup/gain/analysis/bbr_drain_gain.pdf\r\n\r\n(2) simplicity (1/2 is simpler than a 0.346 that would be a hang-over derived from an earlier BBR design parameter that's no longer used)\r\n\r\n(3) using 1/2 presumably has a significantly lower risk of stalls/rebuffers if the ACK stream dries up;  if the ACK stream dries up we presumably would rather have the pacing rate set to 0.5*estimated_bandwidth\r\n than 0.34*estimated_bandwidth.\r\n\r\nI would just like to run another A/B experiment to directly compare 0.346 with 0.5 to ensure there is no regression, before \"finalizing\" the 0.5 value.\r\n",
          "createdAt": "2024-11-04T15:41:55Z",
          "updatedAt": "2024-11-04T15:41:55Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "[BTW, my update https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/6#issuecomment-2455049496 crossed with Joseph's update https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/6#issuecomment-2455039635 ... :-) ]\r\n\r\n>  But when Startup has reached the delivery rate plateau, BBR should be cwnd limited since StartupPacingGain > StartupCwndGain. Is my reasoning correct here?\r\n\r\nI believe the reasoning would be: when Startup has reached the delivery rate plateau, BBR should be cwnd limited since: \r\n\r\nStartupPacingGain > 1, which means the sending rate is greater than the delivery rate, so that a queue will accumulate at the bottleneck link and grow until inflight reaches cwnd, and the magnitude of the flow's contribution to the queue will be roughly: cwnd - true_BDP ~= startup_cwnd_gain*estimated_BDP - true_BDP, so the magnitude of the queue will be in proportion to startup_cwnd_gain.\r\n\r\n",
          "createdAt": "2024-11-04T15:59:54Z",
          "updatedAt": "2024-11-04T15:59:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6OEkCF",
          "commit": {
            "abbreviatedOid": "c7d7d37"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM, minus the very long line.",
          "createdAt": "2024-10-22T01:11:15Z",
          "updatedAt": "2024-10-22T01:11:26Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "Please reflow this",
              "createdAt": "2024-10-22T01:11:16Z",
              "updatedAt": "2024-10-22T01:11:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 10,
      "id": "PR_kwDOL3MllM6FKx4e",
      "title": "BBRIsProbingBW() is not implemented",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/10",
      "state": "MERGED",
      "author": "haproxyFred",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "According to this draft in relation with BBRAdaptLowerBoundsFromCongestion():\r\n\r\n  4.5.10.3. When not Probing for Bandwidth\r\n  When not explicitly accelerating to probe for bandwidth (Drain, ProbeRTT,\r\n  ProbeBW_DOWN, ProbeBW_CRUISE), BBR responds to loss by slowing down to some\r\n  extent.\r\n\r\nthis function should exclude the BBR states which are not aforementioned, that is to say Startup, ProbeBW_UP and ProbeBW_REFILL calling BBRIsProbingBW(). So, this latter should be implemented as follows:\r\n\r\nBBRIsProbingBW():\r\n\treturn BBR.state == Startup or\r\n\t       BBR.state == ProbeBW_UP or\r\n\t       BBR.state == ProbeBW_REFILL\r\n\r\nThis patch directly inlines the code of BBRIsProbingBW().",
      "createdAt": "2024-12-13T16:55:09Z",
      "updatedAt": "2025-01-10T17:12:08Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "b286d1084fa85d12b1a4a141be339fad8e2759fa",
      "headRepository": "haproxyFred/draft-ietf-ccwg-bbr",
      "headRefName": "main",
      "headRefOid": "0e9eed7fe90b6737060e81dae9db1a2f7ad6e4a4",
      "closedAt": "2025-01-10T17:12:08Z",
      "mergedAt": "2025-01-10T17:12:08Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "ec8e965913f5b603296d3f74386eb6000e6de9d4"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for finding and fixing this!\r\n\r\nA couple minor requests before we merge this:\r\n\r\n+ The commit description calls this document an \"RFC\", but it is just an Internet Draft so far. To avoid confusion, can you please replace \"RFC\" with \"Internet Draft\"?\r\n\r\n+ To make it easier for folks comparing the Linux TCP BBRv3 code and the draft, can you please pull this pseudocode out into a separate BBRIsProbingBW() function and place it immediately above the BBRHasElapsedInPhase() function, to match the  Linux TCP BBRv3 code here:\r\n\r\nhttps://github.com/google/bbr/blob/7542cc7c41c0492a0cdbeb77e295cbfdcd9f5e11/net/ipv4/tcp_bbr.c#L1016\r\n\r\n+ Similarly, can you please reorder the checks to more closely match the Linux TCP BBRv3 code:\r\n\r\n```\r\nBBRIsProbingBW():\r\n  return (BBR.state == Startup or\r\n          BBR.state == ProbeBW_REFILL or\r\n          BBR.state == ProbeBW_UP)\r\n```\r\n\r\n+ Can you please share your first and last name?\r\n\r\n+ Is it OK if we add your first and last name to the acknowledgments section? If so, I encourage you to add yourself there in this commit, to avoid extra round trips of edits/reviews (s/and Amanda Baber/Amanda Baber, and Your Name/).\r\n\r\nThanks!\r\n\r\ncc: @ianswett @jbeshay ",
          "createdAt": "2024-12-13T17:16:33Z",
          "updatedAt": "2024-12-13T17:16:33Z"
        },
        {
          "author": "haproxyFred",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ok. Well, I am not sure a \"git push -f\" was a good idea. Let me know.",
          "createdAt": "2024-12-13T17:57:06Z",
          "updatedAt": "2024-12-13T17:57:06Z"
        },
        {
          "author": "haproxyFred",
          "authorAssociation": "CONTRIBUTOR",
          "body": "oops, sorry, forgot to mention the \"Internet Draft\"...",
          "createdAt": "2024-12-13T18:07:19Z",
          "updatedAt": "2024-12-13T18:07:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6Xkybb",
          "commit": {
            "abbreviatedOid": "0e9eed7"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-10T17:11:57Z",
          "updatedAt": "2025-01-10T17:11:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 11,
      "id": "PR_kwDOL3MllM6J4MFN",
      "title": "Rename inflight_lo and inflight_hi to inflight_shortterm and inflight\u2026",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/11",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "\u2026_longterm\r\n\r\nAlso rename bw_lo to bw_shortterm.\r\n\r\nThis also reflows a lot of lines, only some of which were directly affected by the rename.\r\n\r\nFixes #9 ",
      "createdAt": "2025-02-03T16:54:35Z",
      "updatedAt": "2025-02-21T19:11:55Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "d0db28b7de659e66ad502af6194c4bdc4303b797",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-shortterm-longterm",
      "headRefOid": "5786d123285d1a623df1ed5a0553c8844fa3e7e8",
      "closedAt": "2025-02-21T19:11:54Z",
      "mergedAt": "2025-02-21T19:11:54Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "0a9ae4fe8a29fbe97359f0db8a790cabf4ed83da"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6bKQe3",
          "commit": {
            "abbreviatedOid": "5786d12"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "one minor comment, otherwise lgtm",
          "createdAt": "2025-02-08T00:45:15Z",
          "updatedAt": "2025-02-08T00:48:35Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "```suggestion\r\ninflight_longterm. (Part of the short-term model.)\r\n```",
              "createdAt": "2025-02-08T00:45:15Z",
              "updatedAt": "2025-02-08T00:48:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6c_1GB",
          "commit": {
            "abbreviatedOid": "5786d12"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-21T19:01:09Z",
          "updatedAt": "2025-02-21T19:01:10Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "Thanks. Good point. To move this PR along, I'll cook another commit for that.\r\n\r\n",
              "createdAt": "2025-02-21T19:01:10Z",
              "updatedAt": "2025-02-21T19:01:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6c_6AS",
          "commit": {
            "abbreviatedOid": "5786d12"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-21T19:11:17Z",
          "updatedAt": "2025-02-21T19:11:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 12,
      "id": "PR_kwDOL3MllM6J5RuB",
      "title": "Reflow and remove extra whitespace",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/12",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "No text changes",
      "createdAt": "2025-02-03T19:35:07Z",
      "updatedAt": "2025-02-04T01:44:23Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "f9c83c483c864df95e1389a10648664ac0cdc845",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-remove-whitespace",
      "headRefOid": "fbe00a93bf6335f4e982b404bff8ea41264f7541",
      "closedAt": "2025-02-04T01:44:22Z",
      "mergedAt": "2025-02-04T01:44:22Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "d0db28b7de659e66ad502af6194c4bdc4303b797"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 13,
      "id": "PR_kwDOL3MllM6J6guB",
      "title": "Update GitHub actions from the template",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/13",
      "state": "MERGED",
      "author": "ekinnear",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Update github actions from the template",
      "createdAt": "2025-02-03T22:39:33Z",
      "updatedAt": "2025-02-03T23:09:16Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "ec8e965913f5b603296d3f74386eb6000e6de9d4",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ek/update-actions-2",
      "headRefOid": "b3b2eb7dece2d0ebf8dea55e2605d52587bf557f",
      "closedAt": "2025-02-03T23:08:47Z",
      "mergedAt": "2025-02-03T23:08:47Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "f9c83c483c864df95e1389a10648664ac0cdc845"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6adJ4J",
          "commit": {
            "abbreviatedOid": "b3b2eb7"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-03T23:06:05Z",
          "updatedAt": "2025-02-03T23:06:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "PR_kwDOL3MllM6KOJYc",
      "title": "Remove some TCP and SACK references",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/15",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This attempts to keep them when they're relevant and may have missed some.\r\n\r\nAlso there are some TODOs where I was confused what the text intended.  Hopefully @nealcardwell can let me know how to fix those.\r\n\r\nFixes #4",
      "createdAt": "2025-02-06T03:45:07Z",
      "updatedAt": "2025-02-21T18:57:10Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "d0db28b7de659e66ad502af6194c4bdc4303b797",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-less-sack",
      "headRefOid": "d92feced57dce5778d5ec2a2b83639798f4a481a",
      "closedAt": "2025-02-21T18:57:10Z",
      "mergedAt": "2025-02-21T18:57:10Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "ea7c7c3f116ccec685c476db8269b29684a8dda0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6a1C9U",
          "commit": {
            "abbreviatedOid": "ff94bdc"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-06T03:55:34Z",
          "updatedAt": "2025-02-06T03:55:34Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nUpon transmitting each packet, BBR or the associated transport protocol\r\n```",
              "createdAt": "2025-02-06T03:55:34Z",
              "updatedAt": "2025-02-06T03:55:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6bKROy",
          "commit": {
            "abbreviatedOid": "0aca347"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-08T00:52:52Z",
          "updatedAt": "2025-02-08T01:00:53Z",
          "comments": [
            {
              "originalPosition": 92,
              "body": "This is for the delivery rate estimation logic, right?",
              "createdAt": "2025-02-08T00:52:52Z",
              "updatedAt": "2025-02-08T01:00:53Z"
            },
            {
              "originalPosition": 97,
              "body": "I am understanding \"delivered\" to mean ACKed. P.delivered is the amount of data acked when P was sent/transmitted, and P.delivered_time was the timestamp when P.delivered had been udpated. \r\n\r\nIf my understanding is correct, then the reword changes the meaning.",
              "createdAt": "2025-02-08T00:58:32Z",
              "updatedAt": "2025-02-08T01:00:53Z"
            },
            {
              "originalPosition": 162,
              "body": "This is consistent with my understanding, delivery means acknowledged.",
              "createdAt": "2025-02-08T00:59:42Z",
              "updatedAt": "2025-02-08T01:00:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6c_y4r",
          "commit": {
            "abbreviatedOid": "d92fece"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-21T18:56:13Z",
          "updatedAt": "2025-02-21T18:56:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "PR_kwDOL3MllM6LSgJR",
      "title": "Ensure BBRCheckFullBWReached pseudo code counts three full rounds",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/16",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In the text description of the full pipe estimator, it counts three rounds. \r\n\r\n> if BBR counts several (three) non-application-limited rounds where attempts to significantly increase the\r\ndelivery rate actually result in little increase (less than 25 percent)\r\n\r\nHowever, the pseudocode allows the full bw to be reset anytime during the round. Depending on the point in time in the round when this happens, this could reduce the time spent in the bandwdith plateau by up to one round. \r\n\r\nBy moving the check for round_start earlier, the estimator is guaranteed to spend 3 full round trips in the plateau.",
      "createdAt": "2025-02-14T19:00:59Z",
      "updatedAt": "2025-02-15T16:18:15Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "d0db28b7de659e66ad502af6194c4bdc4303b797",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "jb-full-bw-reached",
      "headRefOid": "b5f78bf424de41024d21d3befc62bdaa69d1fa96",
      "closedAt": "2025-02-15T16:18:15Z",
      "mergedAt": "2025-02-15T16:18:15Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "7495597fe8f19c8a198f65ecf05c9711f7d024d3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6cFf48",
          "commit": {
            "abbreviatedOid": "2f41ca0"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "cc: @ianswett ",
          "createdAt": "2025-02-14T19:55:55Z",
          "updatedAt": "2025-02-14T19:56:05Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "Good catch! Your fix makes the pseudocode match the Linux TCP BBR implementation of this. I can't remember now why the pseudocode diverged from the actual code.\r\n\r\nTo make it more succinct, and more closely match the Linux TCP code, can we instead please refactor your fix by changing:\r\n\r\nif (BBR.full_bw_now or rs.is_app_limited)\r\n\r\nto:\r\n\r\nif (BBR.full_bw_now or !BBR.round_start or rs.is_app_limited)\r\n\r\nThen the pseudocode will very closely match the code here:\r\nhttps://elixir.bootlin.com/linux/v6.9/source/net/ipv4/tcp_bbr.c#L879\r\n",
              "createdAt": "2025-02-14T19:55:55Z",
              "updatedAt": "2025-02-14T19:56:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 18,
      "id": "PR_kwDOL3MllM6MF_zR",
      "title": "Revert recent prose about P.first_sent_time",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/18",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Commit ea7c7c3f116ccec685c476 added some commentary about first_sent_time: \"Additionally, TCP and other transport protocols that retransmit packets require\".\r\n\r\nBut first_sent_time is not really about retransmits. Rather, it's about the first send time for a flight of outstanding data in the network, and is used for\r\ncomputing the time elapsed to send the currently\r\noutstanding flight of data.\r\n\r\nThis commit removes the commentary and moves\r\nthe definition of P.first_sent_time back to its original spot.",
      "createdAt": "2025-02-21T19:36:42Z",
      "updatedAt": "2025-02-23T15:12:19Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "0a9ae4fe8a29fbe97359f0db8a790cabf4ed83da",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-p-first-sent-time",
      "headRefOid": "62c684da72fb61d93591b153f509e202be552314",
      "closedAt": "2025-02-23T15:12:19Z",
      "mergedAt": "2025-02-23T15:12:19Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "3d59ec9e1ce9fe14d94a9c950d1664746f7d6c27"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "cc: @ianswett @jbeshay ",
          "createdAt": "2025-02-21T19:36:54Z",
          "updatedAt": "2025-02-21T19:36:54Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6dAGdJ",
          "commit": {
            "abbreviatedOid": "62c684d"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-21T19:38:35Z",
          "updatedAt": "2025-02-21T19:38:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 19,
      "id": "PR_kwDOL3MllM6MGBWQ",
      "title": "Remove \"(thus the name)\" comments after longterm/shortterm rename",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/19",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Remove \"(thus the name)\" comments.\r\nThey no longer make sense after the longterm/shortterm rename.\r\n\r\nThanks for jbeshay@ pointing this out during a recent review!\r\n",
      "createdAt": "2025-02-21T19:39:59Z",
      "updatedAt": "2025-02-25T17:47:16Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "0a9ae4fe8a29fbe97359f0db8a790cabf4ed83da",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-thus-the-name",
      "headRefOid": "27285ffc52a4f17047a3ff0d34a9b38315b4f23e",
      "closedAt": "2025-02-25T17:47:08Z",
      "mergedAt": "2025-02-25T17:47:08Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "a0c260787d9f4abab3080efd0e39e1a7263af1a4"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "cc: @ianswett @jbeshay ",
          "createdAt": "2025-02-21T19:40:10Z",
          "updatedAt": "2025-02-21T19:40:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6dT0Qo",
          "commit": {
            "abbreviatedOid": "27285ff"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-25T04:30:09Z",
          "updatedAt": "2025-02-25T04:30:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 20,
      "id": "PR_kwDOL3MllM6MGFmG",
      "title": "fix awkward \\* on a line by itself",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/20",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A recent edit left this lonely \\* on a line by itself.",
      "createdAt": "2025-02-21T19:48:09Z",
      "updatedAt": "2025-02-25T17:53:11Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "0a9ae4fe8a29fbe97359f0db8a790cabf4ed83da",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-fix-awkward-star",
      "headRefOid": "0fae7923f5388687a81d416d3b41311cc9426abc",
      "closedAt": "2025-02-25T17:53:07Z",
      "mergedAt": "2025-02-25T17:53:07Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "f1ec1d9c7973560c2bc554e6d8fb506a9337463e"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Forgot to mention; This also simplifies:\r\n\r\n  BBR takes an approach  where the additive increase\r\n\r\nto:\r\n\r\n  The additive increase\r\n",
          "createdAt": "2025-02-21T19:49:28Z",
          "updatedAt": "2025-02-21T19:49:28Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6dT0w4",
          "commit": {
            "abbreviatedOid": "782ee58"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-02-25T04:31:19Z",
          "updatedAt": "2025-02-25T04:31:20Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n  O(1,000,000) packets; even a high-speed WAN BDP like\r\n```",
              "createdAt": "2025-02-25T04:31:19Z",
              "updatedAt": "2025-02-25T04:31:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6dT00M",
          "commit": {
            "abbreviatedOid": "782ee58"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "A small suggestion, but LGTM",
          "createdAt": "2025-02-25T04:31:27Z",
          "updatedAt": "2025-02-25T04:32:29Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n  O(1,000,000) packets; even a high-speed WAN BDP like\r\n```",
              "createdAt": "2025-02-25T04:31:27Z",
              "updatedAt": "2025-02-25T04:32:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 21,
      "id": "PR_kwDOL3MllM6MGM4f",
      "title": "define \"acknowledged\" and \"delivered\" in a transport-agnostic way",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/21",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Recent commit ea7c7c3f116ccec685c476 made some nice improvements\r\nby replacing verbose, TCP-specific text like \"ACKed or SACKed\"\r\nwith succinct and transport-agnostic terms like \"acknowledged\".\r\n\r\nLet's add text to be very clear about what we  mean by those terms,\r\ns ince they are key, and TCP implementors may be\r\nconfused about whether \"acknowledged\" includes SACKs.\r\n",
      "createdAt": "2025-02-21T20:08:25Z",
      "updatedAt": "2025-02-25T17:47:55Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "0a9ae4fe8a29fbe97359f0db8a790cabf4ed83da",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-define-acknowledged-delivered",
      "headRefOid": "f2045a390c63c19c49ca1619d3a005b68a84c00a",
      "closedAt": "2025-02-25T17:47:44Z",
      "mergedAt": "2025-02-25T17:47:44Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "aa11c8770647b2a76cac1dc94f19e125782087cd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6dT19b",
          "commit": {
            "abbreviatedOid": "f2045a3"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-25T04:33:45Z",
          "updatedAt": "2025-02-25T04:33:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 25,
      "id": "PR_kwDOL3MllM6M-yPF",
      "title": "RFC 793 -> RFC 9293",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/25",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-28T19:39:06Z",
      "updatedAt": "2025-03-01T15:45:30Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "f1ec1d9c7973560c2bc554e6d8fb506a9337463e",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-rfc-793-rfc-9293",
      "headRefOid": "bbafd294bf8a04320e9c8c447bbe0ee338347ccb",
      "closedAt": "2025-03-01T15:45:30Z",
      "mergedAt": "2025-03-01T15:45:30Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "c0b1c8764f10ee53a5b81894fb5fc726d41b1c3b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6eDvWR",
          "commit": {
            "abbreviatedOid": "bbafd29"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-28T21:11:37Z",
          "updatedAt": "2025-02-28T21:11:37Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6eGfOQ",
          "commit": {
            "abbreviatedOid": "bbafd29"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-01T15:44:51Z",
          "updatedAt": "2025-03-01T15:44:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "PR_kwDOL3MllM6PdGq7",
      "title": "Remove the \"C.\" prefix from connection local variables",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/30",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Alternatively, we could be consistent about always using \"C.\" in front of connection local variables, which I don't believe we are today.\r\n\r\nFixes #28 ",
      "createdAt": "2025-03-20T12:10:53Z",
      "updatedAt": "2025-04-09T20:30:55Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "c0b1c8764f10ee53a5b81894fb5fc726d41b1c3b",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-less-C",
      "headRefOid": "92f4d72bfba7bface48e38faef158227c7cbd76b",
      "closedAt": "2025-04-09T20:30:55Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "More details in my comment on the issue but tl;dr, I prefer using \"C.\" for all the connection variables instead.",
          "createdAt": "2025-04-02T22:25:35Z",
          "updatedAt": "2025-04-02T22:25:35Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 33,
      "id": "PR_kwDOL3MllM6QqS10",
      "title": "Document ECN stance",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/33",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #7\r\n\r\nRelevant to #31",
      "createdAt": "2025-03-29T16:25:22Z",
      "updatedAt": "2025-04-10T15:24:54Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "c0b1c8764f10ee53a5b81894fb5fc726d41b1c3b",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-ecn-stance",
      "headRefOid": "3f5e1920d8406730429dc59769d346cd84046461",
      "closedAt": "2025-04-10T15:24:54Z",
      "mergedAt": "2025-04-10T15:24:54Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "13b1c03a1c04ac7821c4efa236a9bfc210e53145"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks good to me. Thanks!\r\n",
          "createdAt": "2025-04-09T22:51:55Z",
          "updatedAt": "2025-04-09T22:51:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6imPIg",
          "commit": {
            "abbreviatedOid": "c87e9dc"
          },
          "author": "mwelzl",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-30T15:28:06Z",
          "updatedAt": "2025-03-30T15:28:06Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nClassic {{RFC3168}}, Alternative Backoff with ECN (ABE) {{RFC8511}} or L4S {{RFC9330}} style ECN. However, if\r\n```\r\n\r\nIt seems strange to describe this as if Classic or L4S were the only two possible options. Really, we have:\r\n- Classic, PS, although updated by RFC 8311, PS\r\n- Experimental: ABE or L4S.\r\n",
              "createdAt": "2025-03-30T15:28:06Z",
              "updatedAt": "2025-03-30T15:28:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6itfBf",
          "commit": {
            "abbreviatedOid": "c87e9dc"
          },
          "author": "martinduke",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-03-31T16:18:29Z",
          "updatedAt": "2025-03-31T16:18:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6itp2P",
          "commit": {
            "abbreviatedOid": "c87e9dc"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-03-31T16:38:22Z",
          "updatedAt": "2025-03-31T16:40:58Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Strictly speaking, BBR itself would not do the ECN negotiation itself in some trnsports, and there may be future transports that do not require negotiating ECN support; they may specify it as mandatory. AFAICT the constraint is with the ECN code point. So for precision I'd suggest replacing \"BBR negotiates either type of ECN\" with \"the transport connection claims ECN support by marking  packets using either the ECT(0) or ECT(1) code point\".",
              "createdAt": "2025-03-31T16:38:22Z",
              "updatedAt": "2025-03-31T16:40:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6kMWfk",
          "commit": {
            "abbreviatedOid": "9842739"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-09T20:14:54Z",
          "updatedAt": "2025-04-09T20:15:12Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nthe transport connection claims ECN support by marking packets using either the ECT(0) or ECT(1) code point, the congestion controller response\r\n```",
              "createdAt": "2025-04-09T20:14:54Z",
              "updatedAt": "2025-04-09T20:15:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6kNVXi",
          "commit": {
            "abbreviatedOid": "35783c1"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-09T22:53:26Z",
          "updatedAt": "2025-04-09T22:53:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 37,
      "id": "PR_kwDOL3MllM6SWn-A",
      "title": "remove accidental call to BBRUpdateAggregationBudget()",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/37",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #35\r\n\r\nWe can remove the BBRUpdateAggregationBudget() line.\r\n\r\nThe correct function is BBRUpdateACKAggregation(). And BBRUpdateACKAggregation() is called and defined elsewhere.\r\n",
      "createdAt": "2025-04-12T12:36:51Z",
      "updatedAt": "2025-04-22T16:01:45Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "13b1c03a1c04ac7821c4efa236a9bfc210e53145",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-patch-1",
      "headRefOid": "b44eb5002e4f2de70a78cb21d254a25b65a49083",
      "closedAt": "2025-04-22T16:01:39Z",
      "mergedAt": "2025-04-22T16:01:39Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "2ec3f9695e0dc9fc80dc29e0e3a42993959f4233"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6ko9Wy",
          "commit": {
            "abbreviatedOid": "b44eb50"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-12T16:45:06Z",
          "updatedAt": "2025-04-12T16:45:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6l-YfS",
          "commit": {
            "abbreviatedOid": "b44eb50"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-22T15:55:03Z",
          "updatedAt": "2025-04-22T15:55:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 38,
      "id": "PR_kwDOL3MllM6SW0c5",
      "title": "Remove duplicate IsInflightTooHigh() function definition",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/38",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #36.\r\n\r\nRemove accidental duplicate IsInflightTooHigh() function definition.",
      "createdAt": "2025-04-12T14:58:16Z",
      "updatedAt": "2025-04-22T19:21:38Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "13b1c03a1c04ac7821c4efa236a9bfc210e53145",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-patch-2",
      "headRefOid": "52482cb8350ed1c4fa0ca3ad42c75fad1074b4b5",
      "closedAt": "2025-04-22T19:21:33Z",
      "mergedAt": "2025-04-22T19:21:33Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "c719f982ab562ada9b3cbe27300f0bc4d2a28ed5"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "@ianswett @jbeshay ready for another look... thanks!\r\n",
          "createdAt": "2025-04-22T18:08:57Z",
          "updatedAt": "2025-04-22T18:08:57Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> lgtm but just to clarify, as a side effect of this change the pseudocode can no longer reduce inflight_longterm in the ProbeBW state machine code (https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/blob/main/draft-ietf-ccwg-bbr.md?plain=1#L1592) since it can't call BBRHandleInflightTooHigh, which I previously assumed was the primary path for updating it. Now it is only going to happen in the loss handling path. I think this is a good simplification.\r\n\r\nYes, that is my take as well. Thanks!\r\n",
          "createdAt": "2025-04-22T19:19:48Z",
          "updatedAt": "2025-04-22T19:19:48Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6ko8Gf",
          "commit": {
            "abbreviatedOid": "6bea16f"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LG, minus one editorial nit.",
          "createdAt": "2025-04-12T16:40:03Z",
          "updatedAt": "2025-04-12T16:43:52Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "nit: you removed the end of the comment.  Did you want to remove that or remove the comment entirely or ?",
              "createdAt": "2025-04-12T16:40:03Z",
              "updatedAt": "2025-04-12T16:43:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6l_pAt",
          "commit": {
            "abbreviatedOid": "52482cb"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-04-22T18:08:00Z",
          "updatedAt": "2025-04-22T18:08:00Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Thanks. Posted a commit in this PR to try to fix this missing */ .... PTAL. Thanks!\r\n",
              "createdAt": "2025-04-22T18:08:00Z",
              "updatedAt": "2025-04-22T18:08:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6mAFpT",
          "commit": {
            "abbreviatedOid": "52482cb"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "lgtm but just to clarify, as a side effect of this change the pseudocode can no longer reduce inflight_longterm in the ProbeBW state machine code (https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/blob/main/draft-ietf-ccwg-bbr.md?plain=1#L1592) since  it can't call BBRHandleInflightTooHigh, which I previously assumed was the primary path for updating it. Now it is only going to happen in the loss handling path. I think this is a good simplification.",
          "createdAt": "2025-04-22T18:47:02Z",
          "updatedAt": "2025-04-22T18:47:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 39,
      "id": "PR_kwDOL3MllM6UN0kH",
      "title": "Update functions names to refer to short/long term instead of hi/lo",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/39",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "BBRResetLowerBounds() --> BBRResetShortTermModel()\r\nBBRAdaptUpperBounds() --> BBRAdaptLongTermModel()\r\n\r\nThis makes the purpose of the functions easier to understand and keeps them consistent with the names of the variables they update.",
      "createdAt": "2025-04-28T18:48:47Z",
      "updatedAt": "2025-04-30T19:43:07Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "c719f982ab562ada9b3cbe27300f0bc4d2a28ed5",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "jb_update_function_names",
      "headRefOid": "2f9c9b4fbb674f10e4cda7b7d86d3db4f9d1ece2",
      "closedAt": "2025-04-29T16:06:36Z",
      "mergedAt": "2025-04-29T16:06:36Z",
      "mergedBy": "jbeshay",
      "mergeCommit": {
        "oid": "09850028da05dd5ac59e9fc3db5d1838bfa45447"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Looks great. Joseph, thanks for this! (Sorry for the late review!)\r\n",
          "createdAt": "2025-04-30T19:43:06Z",
          "updatedAt": "2025-04-30T19:43:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6nGt9O",
          "commit": {
            "abbreviatedOid": "2f9c9b4"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks!",
          "createdAt": "2025-04-29T13:34:49Z",
          "updatedAt": "2025-04-29T13:34:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 40,
      "id": "PR_kwDOL3MllM6UN1hY",
      "title": "Clarify C.delivered",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/40",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Addresses https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/32\r\n\r\nAdds normative language to the affected definitions.",
      "createdAt": "2025-04-28T18:50:36Z",
      "updatedAt": "2025-05-08T18:04:54Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "c719f982ab562ada9b3cbe27300f0bc4d2a28ed5",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "jb_c_delivered",
      "headRefOid": "d838d75ade8ff0c506b20cc3d38501992bed7420",
      "closedAt": "2025-04-30T19:44:29Z",
      "mergedAt": "2025-04-30T19:44:29Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "e2a59e82caac806e66b9daa867462b2cbbdb3b15"
      },
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "This addresses my issue, thanks.",
          "createdAt": "2025-05-08T15:34:25Z",
          "updatedAt": "2025-05-08T15:34:25Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6m897J",
          "commit": {
            "abbreviatedOid": "d838d75"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-28T21:24:27Z",
          "updatedAt": "2025-04-28T21:24:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6nYip_",
          "commit": {
            "abbreviatedOid": "d838d75"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-04-30T19:44:16Z",
          "updatedAt": "2025-04-30T19:44:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6oao6x",
          "commit": {
            "abbreviatedOid": "d838d75"
          },
          "author": "martinduke",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "LGTM",
          "createdAt": "2025-05-08T15:34:37Z",
          "updatedAt": "2025-05-08T15:34:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "PR_kwDOL3MllM6Xis2O",
      "title": "define \"inflight\" and use it more precisely and consistently",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/41",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "jbeshay",
        "ianswett"
      ],
      "labels": [],
      "body": "Define \"inflight\" and use it more precisely and consistently.\r\n\r\nRephrase text using the phrase or variable name \"inflight\" for values that are not exactly consistent with the definition of \"inflight\".\r\n\r\nPart of a fix for #14.\r\n",
      "createdAt": "2025-05-25T14:27:00Z",
      "updatedAt": "2025-05-28T14:09:28Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "0ac05f78833a8605b373af9549ca362016857905",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-patch-1",
      "headRefOid": "9d212df08a22ff5757f4faca4deafa9878c826c8",
      "closedAt": "2025-05-28T14:09:28Z",
      "mergedAt": "2025-05-28T14:09:28Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "b91e1daef34e8cf55ad285565820a94fa6d76b26"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "cc: @ianswett @jbeshay ",
          "createdAt": "2025-05-25T14:29:12Z",
          "updatedAt": "2025-05-25T14:29:12Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> That's an improvement, I approve, but I am concerned that we have a related issue on how to use \"inflight\". Graphs from the log of QUIC connections show that inflight follows a saw-tooth pattern. The inflight is lower after an ACK is received, and then climbs up as pacing authorizes more packets to be sent. This does not directly affect this PR, but it can lead to issue when estimating \"app-limited\" by comparing inflight to cwnd.\r\n\r\nAFAICT that inherent sawtooth should be OK, because the draft defines the point at which the inflight should be checked to look for applicaiton-limited behavior: \"The algorithm detects that an application-limited phase has started when the sending application requests to send new data, or the connection's retransmission mechanisms decide to retransmit data\"",
          "createdAt": "2025-05-25T16:05:15Z",
          "updatedAt": "2025-05-25T16:05:15Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "As I said in my comment, this is a good edit, editorial in nature. Sorry for starting a discussion here on how to detect \"application-limited\" status. I entered issue #42 to properly discuss that. Or should we do it on the ccwg mailing list?",
          "createdAt": "2025-05-25T18:08:34Z",
          "updatedAt": "2025-05-25T18:08:34Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> As I said in my comment, this is a good edit, editorial in nature. Sorry for starting a discussion here on how to detect \"application-limited\" status. I entered issue #42 to properly discuss that. Or should we do it on the ccwg mailing list?\r\n\r\nThanks, @huitema. Discussing the application-limited question in issue #42 SGTM. Feel free to mention the issue on the ccwg mailing list if you like.\r\n",
          "createdAt": "2025-05-25T23:40:45Z",
          "updatedAt": "2025-05-25T23:40:45Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6q4R3Q",
          "commit": {
            "abbreviatedOid": "8ab79be"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "That's an improvement, I approve, but I am concerned that we have a related issue on how to use \"inflight\". Graphs from the log of QUIC connections show that inflight follows a saw-tooth pattern. The inflight is lower after an ACK is received, and then climbs up as pacing authorizes more packets to be sent. This does not directly affect this PR, but it can lead to issue when estimating \"app-limited\" by comparing inflight to cwnd.",
          "createdAt": "2025-05-25T15:38:43Z",
          "updatedAt": "2025-05-25T15:38:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6q4VXD",
          "commit": {
            "abbreviatedOid": "a7e3072"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-25T16:40:20Z",
          "updatedAt": "2025-05-25T16:41:06Z",
          "comments": [
            {
              "originalPosition": 292,
              "body": "The indent on this line is a bit odd.  Is this supposed to line up with the two previous lines?",
              "createdAt": "2025-05-25T16:40:21Z",
              "updatedAt": "2025-05-25T16:41:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6q4pMC",
          "commit": {
            "abbreviatedOid": "a7e3072"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-25T23:39:16Z",
          "updatedAt": "2025-05-25T23:39:16Z",
          "comments": [
            {
              "originalPosition": 292,
              "body": "Thanks, @ianswett. Good catch! Tried to fix this in a new commit tacked onto this PR:\r\n\r\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/41/files#diff-9265ceb047b645a452dd43f3cfa4354bf6d63fb7251f8da997a987cef1758281\r\n",
              "createdAt": "2025-05-25T23:39:16Z",
              "updatedAt": "2025-05-25T23:39:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6rK-h0",
          "commit": {
            "abbreviatedOid": "9d212df"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-27T16:29:14Z",
          "updatedAt": "2025-05-27T16:29:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 43,
      "id": "PR_kwDOL3MllM6Xr9pT",
      "title": "Reduce nesting of the \"Delivery Rate Samples\" section",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/43",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "It's currently a subsection of the BBR.max_bw, so it doesn't even show up in the table of Contents:  https://www.ietf.org/archive/id/draft-ietf-ccwg-bbr-02.html#section-4.5.2.1\r\n\r\nI also moved it under section 4.5 as a new 4.6.  I'm not sure if that's the correct organization?  Maybe bandwidth estimation should be its own top-level section?\r\n\r\nI did not change any text, only location and level of nesting.",
      "createdAt": "2025-05-26T22:01:10Z",
      "updatedAt": "2025-05-29T17:35:24Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "0ac05f78833a8605b373af9549ca362016857905",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-less-nesting",
      "headRefOid": "68f94363c4b8353bb854885f2f49d49016f86694",
      "closedAt": "2025-05-29T17:20:28Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "@ianswett I love the idea to reduce the nesting of the \"Delivery Rate Samples\" section.\r\n\r\nI would vote to place the new \"Delivery Rate Samples\" somewhere before the \"Updating Network Path Model Parameters\" section. Rationale: I notice that the \"BBR.max_bw Max Filter\" subsection makes 5 mentions of the phrase \"Delivery rate samples\" in its first few paragraphs. For folks reading the spec linearly, IMHO it would be great to clearly define  \"Delivery Rate Samples\" before the reader gets to the  \"BBR.max_bw Max Filter\" section, which naturally/heavily uses the \"Delivery Rate Samples\"  concept.\r\n\r\nThinking about the overall organization of the sections, I would suggest the following:\r\n\r\n```\r\n4. Detailed Algorithm\r\n  4.1 State Machine\r\n  4.2 Algorithm Organization\r\n  4.3 State Machine Operation\r\n  4.4 Input Signals [NEW]\r\n    4.4.1 Delivery Rate Samples [MOVED HERE from current \"4.5.2.1 Delivery Rate Samples\" section]\r\n    4.4.2 RTT Samples [MOVED HERE and renamed from. current \"4.3.4.3 Calculating the rs.rtt RTT Sample\" section]\r\n  4.5 Updating Network Path Model Parameters\r\n     ...\r\n     4.5.5 Updating the BBR.max_bw Max Filter\r\n     ...\r\n     4.5.10 Restarting From Idle [MOVED HERE from \"4.4 Restarting from Idle\"\r\n  4.6 Updating Control Parameters\r\n```\r\n\r\n@ianswett @jbeshay WDYT?\r\n",
          "createdAt": "2025-05-28T14:34:05Z",
          "updatedAt": "2025-05-28T14:35:15Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "```\r\n4.4 Input Signals [NEW]\r\n    4.4.1 Delivery Rate Samples [MOVED HERE from current \"4.5.2.1 Delivery Rate Samples\" section]\r\n    4.4.2 RTT Samples [MOVED HERE and renamed from. current \"4.3.4.3 Calculating the rs.rtt RTT Sample\" section]\r\n```\r\nI like having a section for Input Signals. It fits better in the flow as you mentioned. It's still a bit too big for a section, but it helps to have it at a higher level with less nesting.\r\nAs a followup, we should also integrate the delivery estimate pseudocode a like we do with other parts. I.e. BBR ack processing and packet transmission references restart from idle and model update pseudocode but not rate estimation.",
          "createdAt": "2025-05-28T17:34:31Z",
          "updatedAt": "2025-05-28T17:34:31Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> ```\r\n> 4.4 Input Signals [NEW]\r\n>     4.4.1 Delivery Rate Samples [MOVED HERE from current \"4.5.2.1 Delivery Rate Samples\" section]\r\n>     4.4.2 RTT Samples [MOVED HERE and renamed from. current \"4.3.4.3 Calculating the rs.rtt RTT Sample\" section]\r\n> ```\r\n> \r\n> I like having a section for Input Signals. It fits better in the flow as you mentioned. It's still a bit too big for a section, but it helps to have it at a higher level with less nesting. As a followup, we should also integrate the delivery estimate pseudocode a like we do with other parts. I.e. BBR ack processing and packet transmission references restart from idle and model update pseudocode but not rate estimation.\r\n\r\nGood idea. Filed a new issue for that:\r\n\r\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/49",
          "createdAt": "2025-05-29T17:35:22Z",
          "updatedAt": "2025-05-29T17:35:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 44,
      "id": "PR_kwDOL3MllM6X3XYD",
      "title": "Use consistent prefixes and casing for variable and constant names",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/44",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "- Use CamelCase for constant names\r\n- Use snake_case for variable names\r\n- All names have prefixes:\r\n    - C: connection state\r\n    - P: per-packet state\r\n    -  rs: per-ack rate sample\r\n    - BBR: bbr's internal state",
      "createdAt": "2025-05-27T23:16:40Z",
      "updatedAt": "2025-05-28T20:58:09Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "b91e1daef34e8cf55ad285565820a94fa6d76b26",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "jb-consistent-naming",
      "headRefOid": "6ffb4d0bf57b83f017863ad32bb30066a4110a1d",
      "closedAt": "2025-05-28T20:57:53Z",
      "mergedAt": "2025-05-28T20:57:53Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "b61a33f73bb464e1ef9663d29407f9763a57b62f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6rY1nw",
          "commit": {
            "abbreviatedOid": "81f0358"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great! This is a vast improvement in clarity and consistency. Thanks, @jbeshay!",
          "createdAt": "2025-05-28T14:50:22Z",
          "updatedAt": "2025-05-28T14:50:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 45,
      "id": "PR_kwDOL3MllM6YCoks",
      "title": "\"the amount of data that was estimated to be in flight\" => C.inflight",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/45",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Try to make this sentence a bit more concise.",
      "createdAt": "2025-05-28T23:45:59Z",
      "updatedAt": "2025-05-29T14:34:01Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "b61a33f73bb464e1ef9663d29407f9763a57b62f",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-patch-2",
      "headRefOid": "dbf3595170d9f12f985fdfe7ce48a02ab213807e",
      "closedAt": "2025-05-29T14:33:56Z",
      "mergedAt": "2025-05-29T14:33:56Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "c225ebb0400e6e067a3b3e4023ecd792ce8499ec"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6rdwwX",
          "commit": {
            "abbreviatedOid": "3a2e4ce"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-28T23:47:55Z",
          "updatedAt": "2025-05-28T23:47:55Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "nit\r\n```suggestion\r\nHere rs.tx_in_flight is the C.inflight value\r\nwhen the most recently ACKed packet was sent. And the BBR.Beta (0.7x) bound\r\n```",
              "createdAt": "2025-05-28T23:47:55Z",
              "updatedAt": "2025-05-28T23:47:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6rkjHX",
          "commit": {
            "abbreviatedOid": "3a2e4ce"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-29T14:19:29Z",
          "updatedAt": "2025-05-29T14:19:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 46,
      "id": "PR_kwDOL3MllM6YCq3L",
      "title": "Fix pacing specification in \"application-limited\" section",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/46",
      "state": "CLOSED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix the pacing specification in \"Tracking application-limited phases\" section.\r\n\r\nThe previous text, \"The sending flow is not currently in the process  of transmitting a packet,\" was an imprecise description of the condition that was checked in the Linux TCP stack to handle tracking of application-limited traffic for fq-based pacing. But this text was not precise, and does not correctly capture the checks needed for other pacing implementations.\r\n\r\nFixes #42",
      "createdAt": "2025-05-28T23:56:21Z",
      "updatedAt": "2025-05-28T23:59:13Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "b61a33f73bb464e1ef9663d29407f9763a57b62f",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-patch-3",
      "headRefOid": "b68cce28154f7b436a9ac865b7e02cabd4f39d65",
      "closedAt": "2025-05-28T23:59:13Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Somehow the github editor deleted a bunch of occurrences of \"application-limited\" all around the doc... Weird. I'm going to cancel this one and retry...",
          "createdAt": "2025-05-28T23:59:13Z",
          "updatedAt": "2025-05-28T23:59:13Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 47,
      "id": "PR_kwDOL3MllM6YCsDR",
      "title": "Fix pacing spec in \"application-limited\" section",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/47",
      "state": "OPEN",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fix the pacing specification in \"Tracking application-limited phases\" section.\r\n\r\nThe previous text, \"The sending flow is not currently in the process of transmitting a packet,\" was an imprecise description of the condition that was checked in the Linux TCP stack to handle tracking of application-limited traffic for fq-based pacing. But this text was not precise, and does not correctly capture the checks needed for other pacing implementations.\r\n\r\nFixes #42",
      "createdAt": "2025-05-29T00:01:59Z",
      "updatedAt": "2025-07-21T02:21:35Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "b61a33f73bb464e1ef9663d29407f9763a57b62f",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-patch-4",
      "headRefOid": "61155b438b0767721c4908514e739691522be26a",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> 2. All the packets considered lost have been retransmitted.\r\n\r\nThis doesn't work well for QUIC, where packets are never retransmitted.\r\n\r\n\r\nCan we write something based on what @huitema suggested, and possibly add a few more other examples (data to retransmit, is data queued, etc)?\r\n\r\nChristian's suggestion:\r\n\"The algorithm detects that an application-limited phase has started when\r\ncongestion control and pacing control would have allowed the application to send data,\r\nand the application had nothing to send. The precise determination of this\r\ncondition depends on how the application uses mechanisms to implement pacing,\r\nbatching, GSO/TSO/offload/etc.\"\r\n\r\n",
          "createdAt": "2025-07-08T00:56:56Z",
          "updatedAt": "2025-07-08T00:56:56Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> > 2. All the packets considered lost have been retransmitted.\r\n> \r\n> This doesn't work well for QUIC, where packets are never retransmitted.\r\n> \r\n> Can we write something based on what @huitema suggested, and possibly add a few more other examples (data to retransmit, is data queued, etc)?\r\n> \r\n> Christian's suggestion: \"The algorithm detects that an application-limited phase has started when congestion control and pacing control would have allowed the application to send data, and the application had nothing to send. The precise determination of this condition depends on how the application uses mechanisms to implement pacing, batching, GSO/TSO/offload/etc.\"\r\n\r\n\r\nOK, sounds good. Let's start with Christian's suggestion and attempt to fold in Ian's suggestions. Also, I think it is important to separate the \"application\" from the \"connection\", since the connection may have unsent or retransmit data  (or one day FEC data?)  queued for transmission even when the application has nothing to send. How about:\r\n\r\n \"BBR detects that an application-limited phase has started for a connection when congestion control and pacing control would have allowed the connection to send data, and yet the connection is not currently sending data and has no data to send (i.e.,  no unsent/new data, no retransmit data, and no other data, such as encoded data blocks for forward error correction). The precise determination of this condition depends on how the connection uses mechanisms to implement pacing, batching, GSO/TSO/offload, etc.\"",
          "createdAt": "2025-07-20T16:55:47Z",
          "updatedAt": "2025-07-20T16:55:47Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "I obviously like the latest proposal from @nealcardwell.\r\n\r\nI think there is a bit more, but we probably want a new issue for that. The \"application limited\" condition is used in two ways:\r\n\r\n- To manage the up-down nature of some applications, with periods of high activity separated by periods of silence or lower activity, the concern being that parameters measured in the past might not be valid when high activity resumes;\r\n- To determine whether a low measurement of the path throughput is due to an actual shrinking of the bottleneck's capacity, or simply due to the application not sending enough data to test that capacity.\r\n\r\nThe first case is reasonably simple to manage, but the second is much more sensitive to batching and TSO issues. Suppose that the window is about 10 packets -- or 10 batches of packets if using TSO. On a given interval, the connection will sometimes send 10 packets, and sometimes 9. If it sends 9, the measurement is likely to fall under the bottleneck bandwidth, but taking that as an estimate of shrinking capacity could be wrong.\r\n\r\nI wonder whether we should consider a different test than \"application limited\". BBR has the concept of the \"nominal CWND\", the product of bottleneck bandwidth estimate and min RTT. If the number of bytes in flight is lower than that, then the measurement will never be larger than the bottleneck bandwidth. Maybe that could be used as a confirmation test: do not lower the bandwidth estimate if not enough data was sent during the period.",
          "createdAt": "2025-07-20T18:04:48Z",
          "updatedAt": "2025-07-20T18:05:46Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that the second case is overly sensitive in that if one is application limited for 1ms of every 100ms RTT, you'd have no 'good' samples, but in reality they're likely all quite good. One can make the logic a bit more flexible to these transitory issues, but you still end up with a non-linearity.\r\n\r\nBut yes, let's discuss that on a separate issue.  I am not sure there's an 'easy' fix for that general problem.",
          "createdAt": "2025-07-21T02:21:35Z",
          "updatedAt": "2025-07-21T02:21:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6renEy",
          "commit": {
            "abbreviatedOid": "61155b4"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-29T03:21:33Z",
          "updatedAt": "2025-05-29T03:21:33Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Nice, but does not capture the timing issue of an implementation that waits until enough \"pacing tokens\" are ready to send a train of packets.",
              "createdAt": "2025-05-29T03:21:33Z",
              "updatedAt": "2025-05-29T03:21:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6rkWzi",
          "commit": {
            "abbreviatedOid": "61155b4"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-29T14:02:38Z",
          "updatedAt": "2025-05-29T14:02:38Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Isn't that a variation of \"The pacing enforcement mechanism permits a packet to be sent now.\"?  If you're waiting for more tokens before sending, then you'd be congestion control limited, not app limited.",
              "createdAt": "2025-05-29T14:02:38Z",
              "updatedAt": "2025-05-29T14:02:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6rkZSZ",
          "commit": {
            "abbreviatedOid": "61155b4"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-29T14:05:59Z",
          "updatedAt": "2025-05-29T14:05:59Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "> Nice, but does not capture the timing issue of an implementation that waits until enough \"pacing tokens\" are ready to send a train of packets.\r\n\r\nAFAICT this text does, in fact, capture such a timing issue.\r\n\r\nIf there is data newly presented to the connection for sending, and there are *not* enough pacing tokens to send,  then pacing does not permit the connection to send, and then this will *not* meet the new \"4. The pacing enforcement mechanism permits a packet to be sent now\" criterion, so the connection will *not* mark itself application-limited (because the connection was not permitted to send by the pacing rate, and thus was CCA-pacing-limited rather than application-limited).\r\n\r\nIf there is data newly presented to the connection for sending, and there *are* enough pacing tokens to send,  then pacing *does* permit the connection to send, and then this will meet the new \"4. The pacing enforcement mechanism permits a packet to be sent now\" criterion. So if all other criteria are met, then the connection will mark itself application-limited (because the connection was already permitted to send by pacing rate and cwnd, and yet did not have any data to send, and thus was application-limited).\r\n\r\nAFAICT that is the correct behavior. What did I miss? :-)\r\n\r\ncc: @ianswett @jbeshay \r\n",
              "createdAt": "2025-05-29T14:05:59Z",
              "updatedAt": "2025-05-29T14:05:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6rkcEg",
          "commit": {
            "abbreviatedOid": "61155b4"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-29T14:09:50Z",
          "updatedAt": "2025-05-29T14:09:50Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "> Isn't that a variation of \"The pacing enforcement mechanism permits a packet to be sent now.\"? If you're waiting for more tokens before sending, then you'd be congestion control limited, not app limited.\r\n\r\n+1, what Ian said. :-) Ian's version was a more concise version of what I was posting concurrently. ( The github UI doesn't do a good job of letting you know someone posted to a bug while you were drafting an update, I guess... :-) )",
              "createdAt": "2025-05-29T14:09:50Z",
              "updatedAt": "2025-05-29T14:09:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6rkiMT",
          "commit": {
            "abbreviatedOid": "61155b4"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-29T14:18:12Z",
          "updatedAt": "2025-05-29T14:18:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6rmtP8",
          "commit": {
            "abbreviatedOid": "61155b4"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-29T17:22:02Z",
          "updatedAt": "2025-05-29T17:22:02Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "We could certainly read \"The pacing enforcement mechanism permits a packet to be sent now\" to mean \"the pacing enforcement mechanism permits a train of packets to be sent now\" -- and same for the C.cwnd test. That would be exactly what I suggest. But doesn't that require a bit of \"reading between the lines\"? Can we think of a way to make that reading a bit more explicit?\r\n",
              "createdAt": "2025-05-29T17:22:02Z",
              "updatedAt": "2025-05-29T17:22:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6rnRdo",
          "commit": {
            "abbreviatedOid": "61155b4"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-29T18:16:39Z",
          "updatedAt": "2025-05-29T18:16:39Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "In my view:\r\nApplication Limited = The congestion controller asked for data to send or would have allowed you to send data, and the application had nothing to send\r\n\r\nThere are a number of mechanisms to implement pacing, batching, GSO/TSO/offload/etc, but the more we get into the details of them, the more likely what we say will be wrong.  Possibly we need less text, not more?",
              "createdAt": "2025-05-29T18:16:39Z",
              "updatedAt": "2025-05-29T18:16:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6rpjxQ",
          "commit": {
            "abbreviatedOid": "61155b4"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-29T23:09:01Z",
          "updatedAt": "2025-05-29T23:09:02Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "@ianswett, you may well be right. But \"the congestion controller asked for data\" is kinda application specific. Maybe specify the intent, and then add a qualifier. Such as:\r\n\r\nThe algorithm detects that an application-limited phase has started when\r\ncongestion control and pacing control would have allowed the application to send data, \r\nand the application had nothing to send. The precise determination of this\r\ncondition depends on how the application uses mechanisms to implement pacing,\r\nbatching, GSO/TSO/offload/etc.\r\n",
              "createdAt": "2025-05-29T23:09:01Z",
              "updatedAt": "2025-05-29T23:09:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6roCOQ",
          "commit": {
            "abbreviatedOid": "61155b4"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I just realized that this long post I drafted on May 29 is still considered by github to be \"pending\", and did not get sent, I guess. so I'm posting now...\r\n\r\n(this is my post starting: 'I am considering some alternatives based on the suggestion ...')",
          "createdAt": "2025-05-29T19:31:41Z",
          "updatedAt": "2025-07-07T19:45:35Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I am considering some alternatives based on the suggestion from @huitema :\r\n\r\n(1) \"The pacing enforcement mechanism permits a train of packets to be sent now.\": IMHO this is not a good option because \"train\" is not defined or even mentioned in the draft. :-)\r\n\r\n(2) \"The pacing enforcement mechanism permits a full quantum of packets to be sent now.\": this is well-defined, but AFAICT is incorrect. If newly-available data arrives at the connection and the pacing mechanism allows sending even a single packet, then that connection was not pacing limited, but rather was application-limited (essentially, waiting for the application to send that single packet that was already permisable to send).\r\n\r\n(3) One potential way to perhaps clear up some of the fuzziness would be to mention the quantum enforcement explicitly. Something like the following (note the new number 4 item):\r\n\r\n```\r\n2. All the packets considered lost have been retransmitted.\r\n\r\n3. The sending flow is not currently in the process of transmitting a packet.\r\n\r\n4. The quantum scheduler permits an aggregate containing one or more packets to be sent now.\r\n\r\n6. The pacing enforcement mechanism permits a packet to be sent now.\r\n\r\n7. The congestion window permits a packet to be sent now, i.e.,\r\n   C.inflight is less than C.cwnd.\r\n\r\n```\r\n@ianswett @jbeshay @huitema what do you think of this version (3)?\r\n\r\n@huitema : if you don't like this (3) proposal, to ease the process of making forward progress, can you please make a specific, concrete suggestion for text you would like to see?\r\n",
              "createdAt": "2025-05-29T19:31:41Z",
              "updatedAt": "2025-07-07T19:45:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 48,
      "id": "PR_kwDOL3MllM6YInS9",
      "title": "Move Delivery Rate Samples and RTT into \"Input Signals\"",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/48",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #43\r\n\r\nThe intent is:\r\n```\r\n4.4 Input Signals [NEW]\r\n  4.1 Delivery Rate Samples [MOVED HERE from current \"4.5.2.1 Delivery Rate Samples\" section]\r\n  4.2 RTT Samples [MOVED HERE and renamed from. current \"4.3.4.3 Calculating the rs.rtt RTT Sample\" section]\r\n5. Detailed Algorithm\r\n  5.1 State Machine\r\n  ...\r\n```",
      "createdAt": "2025-05-29T14:39:30Z",
      "updatedAt": "2025-05-29T17:20:27Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "c225ebb0400e6e067a3b3e4023ecd792ce8499ec",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-input-signals",
      "headRefOid": "7ef029106610cf2af745a318d30648bad836ad0e",
      "closedAt": "2025-05-29T17:20:27Z",
      "mergedAt": "2025-05-29T17:20:27Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "ced56e9fe21f83fcf16253406defafdd6905a130"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6rlCft",
          "commit": {
            "abbreviatedOid": "7ef0291"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks great to me. Thanks!\r\n",
          "createdAt": "2025-05-29T15:01:47Z",
          "updatedAt": "2025-05-29T15:01:47Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6rl40C",
          "commit": {
            "abbreviatedOid": "7ef0291"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "lgtm!",
          "createdAt": "2025-05-29T16:07:51Z",
          "updatedAt": "2025-05-29T16:07:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 50,
      "id": "PR_kwDOL3MllM6ZG64g",
      "title": "Improve consistency between core BBR and delivery rate estimation pseudocode",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/50",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is an attempt to make the pseudocode for BBR and the delivery estimation work together a little bit better.\r\n- Adds RS as a new BBR state variable.\r\n- Adds C.min_rtt instead of MinRTT(tp) that was used by the delivery estimation psuedocode but not defined.\r\n- Remove usage of SND.NXT and SND.UNA\r\n- BBRUpdateOnAck now calls GenerateRateSample().\r\n\r\nBBROnTransmit() and OnPacketSent() are still separate because the former is before a packet is transmitted and the latter is after.\r\n\r\nAddresses #49 ",
      "createdAt": "2025-06-04T23:54:22Z",
      "updatedAt": "2025-07-03T20:06:14Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "1afb70ea0bc729f50333405a706b78d970c01477",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "jb_integrate_bwest_pseudocode",
      "headRefOid": "82ebc3b4ae95abfdcc6453e18fa71e39a7bee3ea",
      "closedAt": "2025-07-03T20:00:13Z",
      "mergedAt": "2025-07-03T20:00:13Z",
      "mergedBy": "jbeshay",
      "mergeCommit": {
        "oid": "5ef7c04fbf2e2668e7ccc4b4d33546eff56828df"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, I would prefer to use rs rather than BBR.rs, for a few reasons:\r\n\r\n+ rs.foo is more succinct and IMHO easier to read than BBR.rs.foo\r\n\r\n+ IMHO it's nice to keep the rate sampling algorithm (rs) somewhat separate from BBR itself. Partly because it's conceptually more clear that the rs algorithm is independent, and does not depend on BBR. Partly to encourage other algorithms to use the rate sampling algorithm if it is useful.\r\n\r\n+ I like the approach we had of saying C.foo is for connection state outside BBR, P.foo is for packet state, rs.foo is for rate sample state, BBR.foo is for BBR algorithm state.\r\n\r\nI guess as a related change we could make BBR.send_quantum called C.send_quantum instead, so the control variables are:\r\nC.cwnd, C.pacing_rate, C.send_quantum (instead of the current C.cwnd, C.pacing_rate, BBR.send_quantum)\r\n",
          "createdAt": "2025-06-10T19:04:45Z",
          "updatedAt": "2025-06-10T19:04:45Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "While we're discussing naming, should rs be capitalized if it's a top level item?",
          "createdAt": "2025-06-12T14:35:00Z",
          "updatedAt": "2025-06-12T14:35:00Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> While we're discussing naming, should rs be capitalized if it's a top level item?\r\n\r\nYes, good point. So how about:\r\n\r\n+ rate sample is RS; its fields are RS.foo\r\n\r\n+ connection is C; C.foo is for connection state outside BBR; connection control parameters are: C.cwnd, C.pacing_rate, C.send_quantum\r\n\r\n+ packet is P; P.foo is for packet state\r\n\r\n+ BBR.foo is for BBR algorithm state foo\r\n",
          "createdAt": "2025-06-12T15:18:02Z",
          "updatedAt": "2025-06-12T15:18:02Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The reason I initially added BBR.rs is to make a distinction between the definition of fields in the rate sampling section from the rate sample variable in the BBR algorithm, but I see that it can also be confusing. I will update the diff according to Neal's suggestions above.",
          "createdAt": "2025-07-02T23:14:11Z",
          "updatedAt": "2025-07-02T23:14:11Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@nealcardwell Thanks. I will open another PR to address your comments shortly.",
          "createdAt": "2025-07-03T20:05:33Z",
          "updatedAt": "2025-07-03T20:05:33Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> @nealcardwell Thanks. I will open another PR to address your comments shortly.\r\n\r\nGreat, thanks! :-)\r\n",
          "createdAt": "2025-07-03T20:06:14Z",
          "updatedAt": "2025-07-03T20:06:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6ttyPF",
          "commit": {
            "abbreviatedOid": "d344394"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM, though I didn't know if we were only using rs before and not BBR.rs in an effort to keep the rate sampling algorithm somewhat separate from BBR itself?\r\n\r\nI'll let @nealcardwell answer that question.",
          "createdAt": "2025-06-10T17:24:02Z",
          "updatedAt": "2025-06-10T17:24:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6vRco5",
          "commit": {
            "abbreviatedOid": "d344394"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks for doing this, but I'd like to see Neal's suggestions before this lands.",
          "createdAt": "2025-06-18T20:34:55Z",
          "updatedAt": "2025-06-18T20:34:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6x4Kcy",
          "commit": {
            "abbreviatedOid": "8764e2d"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "It looks like one variable might be defined twice in slightly different ways, but that's not new, so LGTM.",
          "createdAt": "2025-07-03T18:42:45Z",
          "updatedAt": "2025-07-03T18:46:32Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "This appears to be a duplicate definition.  Can we combine them?",
              "createdAt": "2025-07-03T18:42:45Z",
              "updatedAt": "2025-07-03T18:46:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6x4-ao",
          "commit": {
            "abbreviatedOid": "8764e2d"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-03T19:58:43Z",
          "updatedAt": "2025-07-03T19:58:43Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "The the three output parameters are defined twice. I will open a separate issue to track that.\r\n\r\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/54",
              "createdAt": "2025-07-03T19:58:43Z",
              "updatedAt": "2025-07-03T20:00:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6x4lA8",
          "commit": {
            "abbreviatedOid": "8764e2d"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks, Joseph! This is a very nice improvements. A few quick thoughts...",
          "createdAt": "2025-07-03T19:09:02Z",
          "updatedAt": "2025-07-03T20:03:12Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "Good catch! Let's keep a C.send_quantum definition in the \"Output Control Parameters\" section above and drop this one.\r\n\r\nI would suggest melding the definitions together into the following:\r\n\r\nC.send_quantum: The maximum size of a data aggregate scheduled and transmitted\r\ntogether as a unit, e.g., to amortize per-packet transmission overheads.\r\n",
              "createdAt": "2025-07-03T19:09:02Z",
              "updatedAt": "2025-07-03T20:03:12Z"
            },
            {
              "originalPosition": 77,
              "body": "Looks like this C.pacing_rate definition is a duplicate definition as well. I'd suggest dropping this definition and keeping the definition in the \"Output Control Parameters\" section above. I prefer the definition above (\"The current pacing rate for a BBR flow, which controls inter-packet spacing\"), unless someone has another suggestion.\r\n\r\nOr feel free to put that in a separate PR if you prefer. Or I can do it if you prefer.... :-)\r\n",
              "createdAt": "2025-07-03T19:11:55Z",
              "updatedAt": "2025-07-03T20:03:12Z"
            },
            {
              "originalPosition": 59,
              "body": "nit: s/acknowledgement/acknowledgment/ since the doc tries to be consistent in using the \"acknowledgment\" version (without the \"e\" after \"g\") that seems to be the primary spelling in IETF RFCS (at least https://datatracker.ietf.org/doc/html/rfc9293 and https://datatracker.ietf.org/doc/html/rfc5681 and https://datatracker.ietf.org/doc/html/rfc9000 ).\r\n\r\nThough I see there are 2 existing spots in the doc that use \"acknowledgement\" if you want to fix those as well... (Or I can, if you prefer...)\r\n",
              "createdAt": "2025-07-03T19:19:30Z",
              "updatedAt": "2025-07-03T20:03:12Z"
            },
            {
              "originalPosition": 134,
              "body": "The (SND.NXT == SND.UNA) rather than (C.inflight == 0) was intentional.\r\n\r\nIn TCP BBR we started with (C.inflight == 0) but then changed to (SND.NXT == SND.UNA) because C.inflight == 0)  caused buggy behavior.  Here is the comment and code we put in the Linux TCP rate sample code at that spot:\r\n\r\n```\r\n\t  * Note that we use packets_out instead of tcp_packets_in_flight(tp)\r\n\t  * because the latter is a guess based on RTO and loss-marking\r\n\t  * heuristics. We don't want spurious RTOs or loss markings to cause\r\n\t  * a spuriously small time interval, causing a spuriously high\r\n\t  * bandwidth estimate.\r\n\tif (!tp->packets_out) {\r\n\t\tu64 tstamp_us = tcp_skb_timestamp_us(skb);\r\n\r\n\t\ttp->first_tx_mstamp  = tstamp_us;\r\n\t\ttp->delivered_mstamp = tstamp_us;\r\n\t}\t \r\n```\r\n\r\nNot sure how to express this in a transport-agnostic way that would work for TCP and QUIC. How about something like:\r\n\r\n```\r\n   Note that this logic uses UnacknolwedgedBytes() rather that C.inflight\r\n   because C.inflight is an estimate based on loss detection heuristics.\r\n   It is important to avoid having spurious loss detection episodes cause\r\n   a spuriously small time interval, causing a spuriously high\r\n   delivery rate samples.\r\n\r\n   After each packet transmission, the sender executes the following steps:\r\n\r\n   if (UnacknolwedgedBytes() == 0)\r\n```\r\n\r\n",
              "createdAt": "2025-07-03T19:37:40Z",
              "updatedAt": "2025-07-03T20:03:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 51,
      "id": "PR_kwDOL3MllM6bSR4t",
      "title": "Describe why BBR is experimental",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/51",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "Fixes #31 \r\nFixes #34",
      "createdAt": "2025-06-19T16:07:39Z",
      "updatedAt": "2025-06-30T12:35:34Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "ced56e9fe21f83fcf16253406defafdd6905a130",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-experimental-status",
      "headRefOid": "f0be93b909096d36be38ccd18667f7ec1da1652b",
      "closedAt": "2025-06-30T12:35:33Z",
      "mergedAt": "2025-06-30T12:35:33Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "665966b5a99d5c2e493bbb8299c00ad24f3ebead"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the great comments Neal, I've updated the PR.",
          "createdAt": "2025-06-19T17:48:46Z",
          "updatedAt": "2025-06-19T17:48:46Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "My hope is that we'll experiment with ways to fix these issues, but we don't have any fixes for them today that are known to work well in simulation and production.",
          "createdAt": "2025-06-23T15:25:46Z",
          "updatedAt": "2025-06-23T15:25:46Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "> My hope is that we'll experiment with ways to fix these issues, but we don't have any fixes for them today that are known to work well in simulation and production.\r\n\r\nOK, maybe my comment is editorial. Describe the same problems but frame it as problems we hope that experimenters will solve? I don't have suggested text. I do think that what you have here checks the box for RFC9743.",
          "createdAt": "2025-06-23T15:30:05Z",
          "updatedAt": "2025-06-23T15:30:05Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> > My hope is that we'll experiment with ways to fix these issues, but we don't have any fixes for them today that are known to work well in simulation and production.\r\n> \r\n> OK, maybe my comment is editorial. Describe the same problems but frame it as problems we hope that experimenters will solve? I don't have suggested text. I do think that what you have here checks the box for RFC9743.\r\n\r\nSGTM to \"frame it as problems we hope that experimenters will solve\".\r\n\r\nFor suggested text, how about:\r\n\r\nOLD: \"This draft is experimental because there are some known areas that could be improved, as described below.\"\r\n\r\nNEW: \"This draft is experimental because there are some known aspects of BBR for which the community is encouraged to conduct experiments and develop algorithm improvements, as described below.\"\r\n",
          "createdAt": "2025-06-23T16:29:34Z",
          "updatedAt": "2025-06-23T16:29:34Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "> > > My hope is that we'll experiment with ways to fix these issues, but we don't have any fixes for them today that are known to work well in simulation and production.\r\n> > \r\n> > \r\n> > OK, maybe my comment is editorial. Describe the same problems but frame it as problems we hope that experimenters will solve? I don't have suggested text. I do think that what you have here checks the box for RFC9743.\r\n> \r\n> SGTM to \"frame it as problems we hope that experimenters will solve\".\r\n> \r\n> For suggested text, how about:\r\n> \r\n> OLD: \"This draft is experimental because there are some known areas that could be improved, as described below.\"\r\n> \r\n> NEW: \"This draft is experimental because there are some known aspects of BBR for which the community is encouraged to conduct experiments and develop algorithm improvements, as described below.\"\r\n\r\nLGTM",
          "createdAt": "2025-06-23T16:30:16Z",
          "updatedAt": "2025-06-23T16:30:16Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks, I updated the PR with Neal's suggestion.",
          "createdAt": "2025-06-23T20:06:19Z",
          "updatedAt": "2025-06-23T20:06:19Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "NONE",
          "body": "BTW I have merge permission for this repo, which is probably residue of being AD and should be removed.",
          "createdAt": "2025-06-23T20:23:21Z",
          "updatedAt": "2025-06-23T20:23:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6vc38K",
          "commit": {
            "abbreviatedOid": "8de9ca3"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-19T16:19:00Z",
          "updatedAt": "2025-06-19T16:27:05Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I'd suggest adding a hyperlink by changing \"ECN\" here to:\r\n\r\n```\r\nECN {{ecn}}\r\n```\r\n\r\nand then changing the:\r\n\r\n```\r\n## ECN\r\n```\r\n\r\nto:\r\n\r\n```\r\n## ECN {#ecn}\r\n```",
              "createdAt": "2025-06-19T16:19:00Z",
              "updatedAt": "2025-06-19T16:27:05Z"
            },
            {
              "originalPosition": 13,
              "body": "IIUC this should be:\r\n\r\n```\r\n{{delivery-rate-samples}}\r\n```\r\n\r\ne.g., elsewhere in the text we have:\r\n```\r\ndelivery rate sampling algorithm in {{delivery-rate-samples}}\r\n```\r\n",
              "createdAt": "2025-06-19T16:20:28Z",
              "updatedAt": "2025-06-19T16:27:05Z"
            },
            {
              "originalPosition": 20,
              "body": "```\r\n{{detecting-application-limited-phases}}\r\n```\r\n",
              "createdAt": "2025-06-19T16:21:31Z",
              "updatedAt": "2025-06-19T16:27:05Z"
            },
            {
              "originalPosition": 24,
              "body": "I found this \"because all bandwidth samples are app-limited, it will not discard old max\r\nbandwidth samples that were not app-limited\" sentence to be confusing... (this is stating that \"all bandwidth samples are app-limited\", so then how could there be \"old max bandwidth samples that were not app-limited\"?)\r\n\r\nHow about something like:\r\n\r\nWhen unable to fill the pipe for a full round trip, BBR will not be able to measure the full link bandwidth, and will mark a bandwidth sample as app-limited. In cases where an application enters a phase where all bandwidth samples are app-limited, BBR will not discard old max bandwidth samples that were not app-limited.\r\n\r\n",
              "createdAt": "2025-06-19T16:26:58Z",
              "updatedAt": "2025-06-19T16:27:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6vdRx9",
          "commit": {
            "abbreviatedOid": "8de9ca3"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-19T17:16:16Z",
          "updatedAt": "2025-06-19T17:16:17Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nThe delivery rate sampling algorithm in {{delivery-rate-samples}}\r\n```",
              "createdAt": "2025-06-19T17:16:16Z",
              "updatedAt": "2025-06-19T17:16:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6vdR46",
          "commit": {
            "abbreviatedOid": "297ec3b"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-19T17:16:37Z",
          "updatedAt": "2025-06-19T17:16:37Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n{{detecting-application-limited-phases}} , such as low latency audio or\r\n```",
              "createdAt": "2025-06-19T17:16:37Z",
              "updatedAt": "2025-06-19T17:16:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6v3bM-",
          "commit": {
            "abbreviatedOid": "e172c5b"
          },
          "author": "martinduke",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "I hate to be pedantic about this, but this is framed more as \"things BBR doesn't do well/doesn't try to do\" than \"things we'll learn from an experiment\". Maybe the hope is that more deployment will gather data to fix this problem?",
          "createdAt": "2025-06-23T15:23:18Z",
          "updatedAt": "2025-06-23T15:23:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6v6vm7",
          "commit": {
            "abbreviatedOid": "f0be93b"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM, thanks!\r\n",
          "createdAt": "2025-06-23T20:14:39Z",
          "updatedAt": "2025-06-23T20:14:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6v6zZQ",
          "commit": {
            "abbreviatedOid": "f0be93b"
          },
          "author": "martinduke",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-23T20:22:06Z",
          "updatedAt": "2025-06-23T20:22:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 52,
      "id": "PR_kwDOL3MllM6bSrWO",
      "title": "Remove second definition of C.delivered",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/52",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "Also merge the descriptions, since they were slightly different.",
      "createdAt": "2025-06-19T17:05:30Z",
      "updatedAt": "2025-06-30T12:43:57Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "ced56e9fe21f83fcf16253406defafdd6905a130",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-double-cdelivered",
      "headRefOid": "d4babc2644f528c77c440241442758a6deecae27",
      "closedAt": "2025-06-30T12:43:57Z",
      "mergedAt": "2025-06-30T12:43:57Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "25bd8e23fb37a4b25e18789d0860d231d384dba4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6xFzNP",
          "commit": {
            "abbreviatedOid": "d4babc2"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-30T12:43:45Z",
          "updatedAt": "2025-06-30T12:43:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 53,
      "id": "PR_kwDOL3MllM6cvQ9T",
      "title": "Replace C.pipe with synonym C.inflight and clarify C.inflight",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/53",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Replace occurrences of C.pipe with the synonym C.inflight, and clarify the definition of C.inflight.\r\n\r\nNote that \"pipe\" is from RFC6675. During the recent PRRbis review process we received the reasonable comment\r\nthat using  \"pipe\" is incorrect (or at least \r\nconfusing/misleading) if the implementation\r\nis not using RFC6675 for loss detection.\r\n\r\nSo let's standardize on \"C.inflight\", which is consistent with PRRbis.",
      "createdAt": "2025-06-30T17:20:27Z",
      "updatedAt": "2025-06-30T17:50:31Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "25bd8e23fb37a4b25e18789d0860d231d384dba4",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-patch-2",
      "headRefOid": "143bd005b41775a9c62ace62de74be0dae64953c",
      "closedAt": "2025-06-30T17:50:30Z",
      "mergedAt": "2025-06-30T17:50:30Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "1afb70ea0bc729f50333405a706b78d970c01477"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Apprently I'm doing a terrible job with the primitive github editor, and introducing empty strings left and right, and need to switch to my native emacs environment... :-)",
          "createdAt": "2025-06-30T17:48:12Z",
          "updatedAt": "2025-06-30T17:48:12Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6xJssx",
          "commit": {
            "abbreviatedOid": "b14301e"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Some small comments, but this is definitely a good change.",
          "createdAt": "2025-06-30T17:34:48Z",
          "updatedAt": "2025-06-30T17:37:50Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "This reads a bit awkwardly, how about:\r\n```suggestion\r\nhave been sent and have not been acknowledged or\r\nmarked as lost since their last transmission\r\n```",
              "createdAt": "2025-06-30T17:34:48Z",
              "updatedAt": "2025-06-30T17:37:50Z"
            },
            {
              "originalPosition": 17,
              "body": "This said (measured in octets or packets) is it important to preserve that?",
              "createdAt": "2025-06-30T17:35:58Z",
              "updatedAt": "2025-06-30T17:37:50Z"
            },
            {
              "originalPosition": 79,
              "body": "```suggestion\r\n    C.cwnd = C.inflight + 1\r\n```",
              "createdAt": "2025-06-30T17:36:32Z",
              "updatedAt": "2025-06-30T17:37:50Z"
            },
            {
              "originalPosition": 88,
              "body": "Did you mean to make this change?\r\n\r\n```suggestion\r\nbelow), its goal is to quickly reduce C.inflight and drain\r\n```",
              "createdAt": "2025-06-30T17:37:20Z",
              "updatedAt": "2025-06-30T17:37:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6xJzrI",
          "commit": {
            "abbreviatedOid": "b14301e"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-06-30T17:44:28Z",
          "updatedAt": "2025-06-30T17:44:28Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I thought about that, but C.inflight (in the pre-existing BBR draft text) is already defined in terms of \"number of bytes\".  Plus  \"pipe\" from {{RFC6675}}  and \"bytes_in_flight\" from {{RFC9002}} are both explicitly defined in bytes, so if we want to cross-reference those we should probably stick with bytes, for consistency. So IMHO we should stick with bytes. The whole doc will need an overhaul to use bytes, but we have an open issue for that anyway: https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/27",
              "createdAt": "2025-06-30T17:44:28Z",
              "updatedAt": "2025-06-30T17:44:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6xJ2sh",
          "commit": {
            "abbreviatedOid": "143bd00"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-06-30T17:48:41Z",
          "updatedAt": "2025-06-30T17:48:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "PR_kwDOL3MllM6dVRnH",
      "title": "Remove duplicate definitions for the output parameters and fix \"acknowledgment\" spelling",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/55",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "* Remove duplicate definitions for the output parameters\r\n* Use consistent spelling for \"acknowledgment\"\r\n\r\nFixes https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/54",
      "createdAt": "2025-07-03T20:38:48Z",
      "updatedAt": "2025-07-03T20:50:59Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "5ef7c04fbf2e2668e7ccc4b4d33546eff56828df",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "jb_fixdupdefs",
      "headRefOid": "53850f3a3f19a8720d581494aa2d0c86d8f26545",
      "closedAt": "2025-07-03T20:50:52Z",
      "mergedAt": "2025-07-03T20:50:52Z",
      "mergedBy": "jbeshay",
      "mergeCommit": {
        "oid": "2f894a4a1abba33774ea2403404a715b1ed51768"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6x5aBM",
          "commit": {
            "abbreviatedOid": "53850f3"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!\r\n",
          "createdAt": "2025-07-03T20:45:26Z",
          "updatedAt": "2025-07-03T20:45:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 56,
      "id": "PR_kwDOL3MllM6dVVdX",
      "title": "Clarify Unacknowledged rather than inflight for rate sample",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/56",
      "state": "OPEN",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Neal noted this difference between unacknowledged and inflight in this comment: \r\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/50#discussion_r2183626841",
      "createdAt": "2025-07-03T20:44:15Z",
      "updatedAt": "2025-07-08T19:03:55Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "2f894a4a1abba33774ea2403404a715b1ed51768",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "jb_unack_vs_inflight",
      "headRefOid": "5ba2408e4f4cbc0fb71a888cb67196302cfbd0bd",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> I'm a bit unclear as to what the difference is between inflight and UnacknowledgedBytes()?\r\n\r\nWhat I meant was something like:\r\n\r\ninflight = \"bytes that are estimated to be in flight in the network somewhere, given loss detection estimates\"\r\ninflight = bytes_sent - bytes_acked - bytes_lost\r\n\r\nUnacknowledgedBytes() = \"bytes that might conceivably be ACKed at some point in the future\"\r\nUnacknowledgedBytes() = bytes_sent - bytes_acked\r\n\r\n> For QUIC, there will be packets that will never be acknowledged, and in some cases the data in those packets might never be acknowledged because the stream was cancelled.\r\n\r\nBasically the intent is that we only want to advance C.first_sent_time and C.delivered_time to P.sent_time if the connection is absolutely certain there is nothing in the network that could be ACKed in the future.\r\n\r\n@ianswett @jbeshay  Any ideas on how to express that better, in a transport-agnostic way?\r\n\r\nWhat does Google QUIC BBR use for this logic?\r\n\r\nHow about MVFST QUIC BBR?\r\n",
          "createdAt": "2025-07-04T18:06:55Z",
          "updatedAt": "2025-07-04T18:06:55Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> \r\n> @ianswett @jbeshay Any ideas on how to express that better, in a transport-agnostic way?\r\n> \r\n> What does Google QUIC BBR use for this logic?\r\n\r\nWe use inflight instead.  In QUIC, a packet sent a long time ago might be ACKed, but at some point you decide it's unlikely enough.  I believe one big difference is that when PTO (aka RTO) fires in QUIC, inflight > 0, but I think TCP declares everything unacked as lost and starts over?  Put another way, QUIC never declares a packet lost due to an RTO/PTO.  Is this the main problematic case, or are there others?   If this is it, we could check bytes_in_flight == 0 and that we're not in RTO?\r\n\r\n> \r\n> How about MVFST QUIC BBR?\r\n\r\n",
          "createdAt": "2025-07-05T20:14:50Z",
          "updatedAt": "2025-07-05T20:14:50Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> > @ianswett @jbeshay Any ideas on how to express that better, in a transport-agnostic way?\r\n> > What does Google QUIC BBR use for this logic?\r\n> \r\n> We use inflight instead. In QUIC, a packet sent a long time ago might be ACKed, but at some point you decide it's unlikely enough. I believe one big difference is that when PTO (aka RTO) fires in QUIC, inflight > 0, but I think TCP declares everything unacked as lost and starts over? Put another way, QUIC never declares a packet lost due to an RTO/PTO. \r\n\r\nFWIW, in TCP PTO and RTO are very different:\r\n\r\n+ At PTO, nothing is marked lost,  cwnd stays the same, and the sender sends 1 packet.\r\n\r\n+ At RTO, everything sent more than 1 RTT ago is marked as lost, cwnd is reset to inflight + 1 packet, and the sender sends 1 packet.\r\n\r\n> Is this the main problematic case, or are there others? If this is it, we could check bytes_in_flight == 0 and that we're not in RTO?\r\n\r\nThe problematic case is a spurious loss detection event: the data-sending connection thinks there is nothing in the network that could be ACKed in the future, but the connection is wrong; there is something in the network that is ACKed in the future.\r\n\r\nRTO is one of the problematic cases, but the problematic case can happen with any kind of loss recovery, including ACK/SACK-triggered fast recovery. Any decision that a packet was lost in the network is a heuristic, and can be wrong; the packet may simply have been delayed or reordered.\r\n\r\nThis code path that sets \"C.first_sent_time = C.delivered_time = P.sent_time\", is basically switching from the normal \"delivery_rate = \u0394delivered /\u0394time\" calculation to a \"delivery_rate = \u0394delivered / RTT\" calculation.\r\n\r\nIf there is a spurious loss detection event, and the delivery rate sampling code thinks inflight is 0, and erroneously executes this code path to set \"C.first_sent_time = C.delivered_time = P.sent_time\", then basically the data sender is erroneously switching from the normal \"delivery_rate = \u0394delivered /\u0394time\" calculation to a \"delivery_rate = \u0394delivered / RTT\" calculation.\r\n\r\nAs noted in slides 7-8 that I cooked for the BBR IETF 99 slides ( https://www.ietf.org/proceedings/99/slides/slides-99-iccrg-iccrg-presentation-2-00.pdf ) the \"delivery_rate = \u0394delivered / RTT\" approach is not safe in the general case where data is outstanding at the time of transmission.\r\n\r\n+ Here is what  \"delivery_rate = \u0394delivered /\u0394time\"  looks like: https://www.ietf.org/proceedings/99/slides/slides-99-iccrg-iccrg-presentation-2-00.pdf#page=7\r\n\r\n+ Here is what \"delivery_rate = \u0394delivered / RTT\" looks like: https://www.ietf.org/proceedings/99/slides/slides-99-iccrg-iccrg-presentation-2-00.pdf#page=8\r\n\r\nIn the diagram, note that the \"delivery_rate = \u0394delivered / RTT\" approach overestimates the slope of the \"y = delivered packets vs x = time\" step function, by calculating the slope of a line that is neither tangent to the \"knee\" of each step, nor tangent to the \"ankle\" of each step. The problem with \"delivery_rate = \u0394delivered / RTT\" is that it can essentially estimate an inter-ACK delay of epsilon seconds instead of the real inter-ACK delay represented by the \"knee to knee\" (or \"ankle to ankle\") time.\r\n\r\nAFAICT, when erroneously using \"delivery_rate = \u0394delivered / RTT\", a plausible worst-case delivery rate overestimation factor is something like 3x. That's in the case where the delivery rate for the path is 1 packet per RTT, and the connection has 2 packets in flight, spuriously marks both packets as lost, transmits a new packet, then epsilon secs later gets the ACKs for the 2 packets it spuriously marked as lost, then 1 RTT later gets the ACK for the 1 packet it most recently transmitted. That causes the delivery_rate sample to be \"delivery_rate = (3 packets) / (1 RTT) = 3 packets/RTT\" when the real delivery_rate is 1 packet/RTT.\r\n\r\nThis is an issue I noticed in actual testing, not a purely theoretical issue, and (at least in TCP) the fix is simple, has 0 space overhead, and actually makes the code faster than using inflight.\r\n\r\nSo IMHO it's important that both the spec and the QUIC implementations use UnacknolwedgedBytes() here. :-)\r\n\r\nSo IMHO we just have to figure out how to express this in a clear and transport-agnostic way. I think this boils down to needing to find a way to express \"there is nothing in the network that could be ACKed in the future\" in a transport-agnostic way. In TCP this is a simple (SND.NXT == SND.UNA)... but I don't know how to express this in QUIC... :-)\r\n\r\n",
          "createdAt": "2025-07-06T14:25:55Z",
          "updatedAt": "2025-07-06T14:30:53Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the explanation, this makes sense.  The solution is not immediately obvious, but let me add some more detail.\r\n\r\nThe only way a QUIC packet could not be ACKed in the future in our code is if the data structure that tracks sent packets stopped tracking the packet because it was 'Useless', because it's already been ACKed, the keys were discarded, etc.\r\n\r\nThe case where bytes_in_flight is 0, but there is an ackable packet outstanding is if a data packet is spuriously declared lost and prior to that, the stream is cancelled, so there's no data to retransmit.  At that point, bytes_in_flight would be 0, but that spuriously lost packet could still be acked in the future.\r\n\r\nThe cases it's important to use RTT is when coming out of quiescence, correct?  Possibly it'd be easier to determine that at the time we take the bandwidth sample than the time we send the packet?  By then we'd know if indeed nothing was in the network at the time the packet was sent.\r\n\r\n",
          "createdAt": "2025-07-07T15:49:34Z",
          "updatedAt": "2025-07-07T15:49:34Z"
        },
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "> The only way a QUIC packet could not be ACKed in the future in our code is if the data structure that tracks sent packets stopped tracking the packet because it was 'Useless', because it's already been ACKed, the keys were discarded, etc.\r\n> \r\n> The case where bytes_in_flight is 0, but there is an ackable packet outstanding is if a data packet is spuriously declared lost and prior to that, the stream is cancelled, so there's no data to retransmit. At that point, bytes_in_flight would be 0, but that spuriously lost packet could still be acked in the future.\r\n\r\nI find that confusing. :-)\r\n\r\nI would have thought that it's also possible to have \"bytes_in_flight is 0, but there is an ackable packet outstanding\"  if a data packet is spuriously declared lost and the stream is still active.\r\n\r\nThat's certainly the case in TCP, since there's no cancellation mechanism, so all \"streams\" are always active. :-)\r\n\r\n> The cases it's important to use RTT is when coming out of quiescence, correct? \r\n\r\nYes, exactly.\r\n\r\nDoes QUIC already have a \"coming out of quiescence\" detector? If so, then that would be a good place to fire this logic.\r\n\r\n> Possibly it'd be easier to determine that at the time we take the bandwidth sample than the time we send the packet? By then we'd know if indeed nothing was in the network at the time the packet was sent.\r\n\r\nPossibly. What logic did you have in mind?\r\n",
          "createdAt": "2025-07-07T16:40:22Z",
          "updatedAt": "2025-07-07T16:40:22Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> > The only way a QUIC packet could not be ACKed in the future in our code is if the data structure that tracks sent packets stopped tracking the packet because it was 'Useless', because it's already been ACKed, the keys were discarded, etc.\r\n> > The case where bytes_in_flight is 0, but there is an ackable packet outstanding is if a data packet is spuriously declared lost and prior to that, the stream is cancelled, so there's no data to retransmit. At that point, bytes_in_flight would be 0, but that spuriously lost packet could still be acked in the future.\r\n> \r\n> I find that confusing. :-)\r\n\r\nSorry, I can try to explain better, possibly on VC.\r\n\r\n> \r\n> I would have thought that it's also possible to have \"bytes_in_flight is 0, but there is an ackable packet outstanding\" if a data packet is spuriously declared lost and the stream is still active.\r\n> \r\n> That's certainly the case in TCP, since there's no cancellation mechanism, so all \"streams\" are always active. :-)\r\n> \r\n> > The cases it's important to use RTT is when coming out of quiescence, correct?\r\n> \r\n> Yes, exactly.\r\n> \r\n> Does QUIC already have a \"coming out of quiescence\" detector? If so, then that would be a good place to fire this logic.\r\n\r\nThere's a check to skip ProbeRTT if inflight is low for long enough, and there's information about whether BBR is app-limited.  A simple check we could do today is that bytes_in_flight is 0 and we were app-limited?  Though I don't think that's perfect.\r\n\r\n> \r\n> > Possibly it'd be easier to determine that at the time we take the bandwidth sample than the time we send the packet? By then we'd know if indeed nothing was in the network at the time the packet was sent.\r\n> \r\n> Possibly. What logic did you have in mind?\r\n\r\nWhen taking a bandwidth sample, if the P.delivered of any packet being acknowledged is identical to C.delivered, then\r\nno packets were acked since the packet was sent, which I think captures the same logic?",
          "createdAt": "2025-07-07T17:32:45Z",
          "updatedAt": "2025-07-07T17:32:45Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Catching up on the discussion. Thanks for the detailed explanation @nealcardwell \r\n\r\n>  How about MVFST QUIC BBR?\r\n\r\nMvfst currently achieves the intention of measuring the send rate by using this:  \u0394delivered / (P.sent_time - P.last_acked.send_time). This is less accurate and can overestimate the RTT but avoids having to track first_sent_time. \r\n\r\n> > > The cases it's important to use RTT is when coming out of quiescence, correct?\r\n> > \r\n> > \r\n> > Yes, exactly.\r\n> > Does QUIC already have a \"coming out of quiescence\" detector? If so, then that would be a good place to fire this logic.\r\n> \r\n> There's a check to skip ProbeRTT if inflight is low for long enough, and there's information about whether BBR is app-limited. A simple check we could do today is that bytes_in_flight is 0 and we were app-limited? Though I don't think that's perfect.\r\n\r\nWe have that logic in BBR itself, not quic-specific. We set idle restart on packet sent `if (C.inflight == 0 and C.app_limited)`. Re-using that wouldn't be too bad.\r\n",
          "createdAt": "2025-07-08T18:35:43Z",
          "updatedAt": "2025-07-08T18:35:43Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> \r\n> We have that logic in BBR itself, not quic-specific. We set idle restart on packet sent `if (C.inflight == 0 and C.app_limited)`. Re-using that wouldn't be too bad.\r\n\r\nI was thinking that adding the app_limited check would help here.  I don't think it fixes the issue in all possible circumstances, but it's likely good enough?\r\n",
          "createdAt": "2025-07-08T19:03:55Z",
          "updatedAt": "2025-07-08T19:03:55Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6x5bgW",
          "commit": {
            "abbreviatedOid": "39f9942"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-03T20:47:20Z",
          "updatedAt": "2025-07-03T20:47:26Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "nit: typo (sorry if that was my typo!) s/UnacknolwedgedBytes()/UnacknowledgedBytes()/\r\n",
              "createdAt": "2025-07-03T20:47:20Z",
              "updatedAt": "2025-07-03T20:47:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6x5jvN",
          "commit": {
            "abbreviatedOid": "59ccc59"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-03T20:56:39Z",
          "updatedAt": "2025-07-03T20:56:43Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "Oops, sorry I wasn't more clear... I was intending to keep the \"After each packet transmission, the sender executes the following steps:\" phrase in the prose (not pseudocode) and to put the new \"Note that this logic uses UnacknowledgedBytes()...\" paragraph in the prose paragraph before the \"After each packet transmission, the sender executes the following steps:\" phrase.\r\n\r\nSo can we move the ~~~~ marker so that it remains on the line before the OnPacketSent()?\r\n",
              "createdAt": "2025-07-03T20:56:40Z",
              "updatedAt": "2025-07-03T20:56:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6x5mLF",
          "commit": {
            "abbreviatedOid": "59ccc59"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-03T20:59:31Z",
          "updatedAt": "2025-07-03T20:59:31Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "No worries. I didn't read it very well either. I just copy/pasted into a new PR :)",
              "createdAt": "2025-07-03T20:59:31Z",
              "updatedAt": "2025-07-03T20:59:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6x6XVL",
          "commit": {
            "abbreviatedOid": "5ba2408"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I'm a bit unclear as to what the difference is between inflight and UnacknowledgedBytes()?\r\n\r\nFor QUIC, there will be packets that will never be acknowledged, and in some cases the data in those packets might never be acknowledged because the stream was cancelled.",
          "createdAt": "2025-07-03T22:27:22Z",
          "updatedAt": "2025-07-03T22:27:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "PR_kwDOL3MllM6dzVEM",
      "title": "Remove C.write_seq because it's TCP-specific",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/57",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "C.write_seq and SND.UNA and SND.MSS are only used in one spot in psuedocode, which I attempted to generalize, but there is likely a better approach.\r\n\r\nAddresses part of #26 ",
      "createdAt": "2025-07-07T17:39:52Z",
      "updatedAt": "2025-07-15T19:38:39Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "2f894a4a1abba33774ea2403404a715b1ed51768",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-write-seq",
      "headRefOid": "67054b8f92dd7479e91c0cdecea7a28ffc7a5f93",
      "closedAt": "2025-07-09T19:08:42Z",
      "mergedAt": "2025-07-09T19:08:42Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "1ddc88321d7f6d29cda206015d223ebcc3e9e16a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6yhbVZ",
          "commit": {
            "abbreviatedOid": "2433724"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-07T19:52:01Z",
          "updatedAt": "2025-07-07T19:52:09Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "In the TCP nomenclature, \"data to write\" would be data in application-level buffers, waiting for a later write() system call.\r\n\r\nWhat we mean is something more like: there is no data in the L4 connection that has not been sent yet.\r\n\r\nHow about:\r\n\r\n    if (NoUnsentData() and\r\n\r\nOr alternatively we could first decide what we want to write in the prose in the  \"application-limited\" section, which is under discussion at:\r\n\r\nApplication-limited detection depends on implementation of pacing #42\r\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/issues/42\r\n\r\nFix pacing spec in \"application-limited\" section #47\r\nhttps://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/47\r\n\r\nOnce we decide how we want to phrase the prose in the   \"application-limited\" section, we could then revise this pseudocode to be closer to the prose?\r\n",
              "createdAt": "2025-07-07T19:52:01Z",
              "updatedAt": "2025-07-07T19:52:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6yhp-Z",
          "commit": {
            "abbreviatedOid": "2433724"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-07T20:19:30Z",
          "updatedAt": "2025-07-07T20:19:30Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I agree that we might want to rework this based on the application-limited update(s), I just happened to notice this state variable was TCP specific and largely unused.\r\n\r\nHappy to wait or land this now and cleanup later, whatever makes more sense.",
              "createdAt": "2025-07-07T20:19:30Z",
              "updatedAt": "2025-07-07T20:19:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6yhvBh",
          "commit": {
            "abbreviatedOid": "67054b8"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Changing it now to NoUnsentData() SGTM. Commit LGTM. Thanks!\r\n",
          "createdAt": "2025-07-07T20:29:27Z",
          "updatedAt": "2025-07-07T20:29:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM60IMYg",
          "commit": {
            "abbreviatedOid": "67054b8"
          },
          "author": "marten-seemann",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-15T19:38:38Z",
          "updatedAt": "2025-07-15T19:38:39Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Maybe better: `!HasPendingDataToSend()`?",
              "createdAt": "2025-07-15T19:38:38Z",
              "updatedAt": "2025-07-15T19:38:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 70,
      "id": "PR_kwDOL3MllM6fuuO-",
      "title": "Remove the date from the metadata",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/70",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The date should get inserted by the tooling upon submission, and explicitly specifying it seems to be overriding that.",
      "createdAt": "2025-07-20T10:44:14Z",
      "updatedAt": "2025-07-20T10:49:45Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "1ddc88321d7f6d29cda206015d223ebcc3e9e16a",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-nodate",
      "headRefOid": "eeb34b4806a345c7e6bbf027b7edbd09693aa38c",
      "closedAt": "2025-07-20T10:49:45Z",
      "mergedAt": "2025-07-20T10:49:45Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "aa5402b965b98a343fcbb4399e90c4c86b5e61cb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM609UR1",
          "commit": {
            "abbreviatedOid": "eeb34b4"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks!\r\n",
          "createdAt": "2025-07-20T10:49:17Z",
          "updatedAt": "2025-07-20T10:49:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 72,
      "id": "PR_kwDOL3MllM6hboJh",
      "title": "Replace segment with packet",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/72",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #62",
      "createdAt": "2025-07-30T20:59:30Z",
      "updatedAt": "2025-08-06T20:52:41Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "aa5402b965b98a343fcbb4399e90c4c86b5e61cb",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-segment-packet",
      "headRefOid": "e820e3a49cae7a3252e74a561436837c70b8c201",
      "closedAt": "2025-08-06T20:50:15Z",
      "mergedAt": "2025-08-06T20:50:15Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "255cfc876e6a78f703df577670fb644501b58994"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM63NKh3",
          "commit": {
            "abbreviatedOid": "77824db"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-31T00:28:13Z",
          "updatedAt": "2025-07-31T01:17:45Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I suspect it will cause confusion and objections if we use \"SMSS\" and say that it \"is equivalent to PMTU in QUIC {{RFC9000, Section 14.2}}\". I can think of at least two significant differences between SMSS and PMTU:\r\n\r\n(1) TCP SMSS is constrained not just by the PMTU, but also by the MSS option the remote peer communicated in its SYN packet.\r\n\r\n(2) TCP SMSS does not include TCP/IP headers but QUIC PMTU does include UDP/IP headers. The https://datatracker.ietf.org/doc/html/rfc5681#section-2 defines SMSS such that the SMSS \"size does not include the TCP/IP headers and options\" but https://datatracker.ietf.org/doc/html/rfc9000#section-14.2 defines PMTU to include IP/UDP headers (\"The PMTU is the maximum size of the entire IP packet, including the IP header, UDP header, and UDP payload\"). \r\n\r\n(3) TCP SMSS is the size of the packet used for congestion control purposes, but in QUIC the PMTU size (full L3 packet including L3 headers and L4+ bytes) is different than the size used for CC purposes in RFC9002, where bytes_in_flight does not include L3/IP or UDP overhead.\r\n\r\n\r\nAs far as how exactly to define the packet size for BBR purposes, it seems we have a few existing approaches we could try to match:\r\n\r\n+ QUIC CC has thus far in https://datatracker.ietf.org/doc/html/rfc9002#section-b.2 defines bytes_in_flight as including L4 headers and L4 payload.\r\n\r\n+ The TCP Reno CC in https://datatracker.ietf.org/doc/html/rfc5681#section-2  defines TCP cwnd control in terms of L4 payload bytes only, and SMSS in terms of payload bytes.\r\n\r\n+ CUBIC CC in https://datatracker.ietf.org/doc/html/rfc9438#section-4.1.2 says cwnd is in segments, aka SMSS bytes. Looking at CUBIC RFC 9438, when it introduces SMSS it simply says \"Sender Maximum Segment Size (SMSS) bytes\". The definitions section says: \"The unit of all window sizes in this document is segments of the SMSS, and the unit of all times is seconds. Implementations can use bytes to express window sizes, which would require factoring in the SMSS wherever necessary and replacing segments_acked ([Figure 4](https://datatracker.ietf.org/doc/html/rfc9438#eq4)) with the number of acknowledged bytes.\"\r\n\r\nI can see two main options:\r\n\r\n(1) Just follow the CUBIC example and use  \"Sender Maximum Segment Size (SMSS)\" without defining it further.\r\n\r\n(2) Try to come up with a transport-agnostic term that avoids confusion/ambiguity. Perhaps instead of C.SMSS we could use C.SMPS: (Sender Maximum Packet Size), defined as  the maximum packet size the sender choses to send, including whatever portion of the packet that the transport protocol implentation tracks for congestion control purposes. This portion MUST include L4 payload.  This MAY be just L4 payload (like TCP SMSS). This MAY be L4 payload plus L4 headers (like QUIC max_datagram_size). Protocol implementations MAY use L2 headers through L4 payload, or L3 headers through L4 payload.\r\n\r\nI would lean toward (2), to avoid baking in this SMSS term that is TCP-centric.\r\n\r\n@ianswett @jbeshay WDYT?\r\n",
              "createdAt": "2025-07-31T00:28:13Z",
              "updatedAt": "2025-07-31T01:17:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM64bhTl",
          "commit": {
            "abbreviatedOid": "77824db"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-06T20:45:15Z",
          "updatedAt": "2025-08-06T20:45:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nC.SMSS: The Sender Maximum Segment Size in bytes. This is similar to PMTU\r\n```",
              "createdAt": "2025-08-06T20:45:15Z",
              "updatedAt": "2025-08-06T20:45:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM64biaq",
          "commit": {
            "abbreviatedOid": "e820e3a"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-06T20:46:51Z",
          "updatedAt": "2025-08-06T20:46:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM64bmRk",
          "commit": {
            "abbreviatedOid": "77824db"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-06T20:52:41Z",
          "updatedAt": "2025-08-06T20:52:41Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "As discussed, I think MaxPacketSize or SenderMaxSize or MaxSendSize might be better than SMPS?",
              "createdAt": "2025-08-06T20:52:41Z",
              "updatedAt": "2025-08-06T20:52:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 74,
      "id": "PR_kwDOL3MllM6j_uCE",
      "title": "Refine definition of C.SMSS",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/74",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Refine the definition of C.SMSS to make it more precise.\r\n\r\nAlso try to fix its TCP-centric definition that uses the term \"segment\", and make it general to any transport protocol implementation, and clarify what implementations MUST and MAY do.\r\n\r\nAlso clarify what TCP and QUIC implementations SHOULD do, since there is extensive experience with BBR with both of those protocols.\r\n\r\nHelps resolve Issue #62  \"segment vs packet\".",
      "createdAt": "2025-08-17T16:47:37Z",
      "updatedAt": "2025-08-20T03:16:14Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "255cfc876e6a78f703df577670fb644501b58994",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-patch-5",
      "headRefOid": "7b1f6871019abd95d8d4b74ccceb8b2587425c75",
      "closedAt": "2025-08-20T03:16:14Z",
      "mergedAt": "2025-08-20T03:16:14Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "bf1e2b52f5d450edeb55cbc6aba5cd8ba168606f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM66v5nG",
          "commit": {
            "abbreviatedOid": "6815bf0"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-19T16:53:00Z",
          "updatedAt": "2025-08-19T16:54:49Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Isn't this identical to the portion of the packet the transport tracks for congestion control purposes?\r\n\r\n```suggestion\r\nsize of a single transmission, including the portion\r\n```",
              "createdAt": "2025-08-19T16:53:00Z",
              "updatedAt": "2025-08-19T16:54:49Z"
            },
            {
              "originalPosition": 14,
              "body": "nit: can you reflow these lines to be a bit longer?",
              "createdAt": "2025-08-19T16:54:41Z",
              "updatedAt": "2025-08-19T16:54:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM66w82c",
          "commit": {
            "abbreviatedOid": "6815bf0"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-19T18:29:38Z",
          "updatedAt": "2025-08-19T18:29:39Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "> nit: can you reflow these lines to be a bit longer?\r\n\r\nSure, added a commit to reflow for longer lines.\r\n",
              "createdAt": "2025-08-19T18:29:38Z",
              "updatedAt": "2025-08-19T18:29:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM6602uK",
          "commit": {
            "abbreviatedOid": "7b1f687"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-20T00:49:47Z",
          "updatedAt": "2025-08-20T00:49:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 76,
      "id": "PR_kwDOL3MllM6kkJ8H",
      "title": "fix P.sent_time vs P.departure_time inconsistency",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/76",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The BBR draft was using P.sent_time and P.departure_time to refer to\r\nthe same quantity. This is due to the P.departure_time originating\r\nfrom the BBR CC draft and the P.sent_time originating from the rate\r\nsampling draft.\r\n\r\nThis commit fixes that inconsistency and performs related clean-up.\r\n\r\n- First we clean up the \"sent\" vs \"departure\" inconsistency and move\r\n  next_departure_time to the \"C\" per-connection \"pseudo-struct\":\r\n\r\ns/BBR.next_departure_time/C.next_send_time/\r\ns/.sent/.send/\r\ns/_sent/_send/\r\ns/.departure/.send/\r\ns/_departure/_send/\r\n\r\n- Then we move the \"Per-packet state\" section from the BBR section and\r\n  consolidate definitions in the \"Per-packet (P) state\" section of the\r\n  rate sampling section.\r\n\r\nFixes #75 ",
      "createdAt": "2025-08-20T20:04:37Z",
      "updatedAt": "2025-08-27T20:44:40Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "bf1e2b52f5d450edeb55cbc6aba5cd8ba168606f",
      "headRepository": "nealcardwell/draft-ietf-ccwg-bbr",
      "headRefName": "draft-ietf-ccwg-bbr-fix-sent-vs-departure",
      "headRefOid": "7c0dadc6bb4291024d880f573c06e76e47b963ee",
      "closedAt": "2025-08-27T20:44:40Z",
      "mergedAt": "2025-08-27T20:44:40Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "36a7e95c82c7d1b7b3db22ad2b97e55f5bb4d71f"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh, BTW, this is to fix issue #75 ...\r\n\r\n",
          "createdAt": "2025-08-20T20:09:39Z",
          "updatedAt": "2025-08-20T20:09:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM67DPD9",
          "commit": {
            "abbreviatedOid": "7c0dadc"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "lgtm. One more step closer to consistent variable names!",
          "createdAt": "2025-08-20T20:48:10Z",
          "updatedAt": "2025-08-20T20:48:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM68cvz0",
          "commit": {
            "abbreviatedOid": "7c0dadc"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-27T20:27:43Z",
          "updatedAt": "2025-08-27T20:37:32Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "nit: Is this the earliest time another packet can be sent, or the time a packet is already scheduled to be sent.  I think they're subtly different?",
              "createdAt": "2025-08-27T20:27:43Z",
              "updatedAt": "2025-08-27T20:37:32Z"
            },
            {
              "originalPosition": 34,
              "body": "Nit: Should this be P.send_complete_time or something similar?  Happy to do a rename like that in a separate PR, though.",
              "createdAt": "2025-08-27T20:31:42Z",
              "updatedAt": "2025-08-27T20:37:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM68c31-",
          "commit": {
            "abbreviatedOid": "7c0dadc"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-27T20:41:04Z",
          "updatedAt": "2025-08-27T20:43:22Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Yes, good point. This is the \"earliest time another packet can be sent\". Feel free to cook another PR if you like. :-)\r\n",
              "createdAt": "2025-08-27T20:41:04Z",
              "updatedAt": "2025-08-27T20:43:22Z"
            },
            {
              "originalPosition": 34,
              "body": "Hmm, I'm not sure what \"P.send_complete_time\" would be. :-) But feel free to cook a PR if there are ideas about how to clarify.\r\n",
              "createdAt": "2025-08-27T20:43:18Z",
              "updatedAt": "2025-08-27T20:43:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDOL3MllM6kkWV1",
      "title": "set P.tx_in_flight in OnPacketSent()",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/78",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Previously P.tx_in_flight was defined, and read in\r\nBBRHandleLostPacket() pseudocode, but there was no pseudocode to set\r\nP.tx_in_flight. This was an oversight.\r\n\r\nThis commit inserts a line to set P.tx_in_flight in OnPacketSent(),\r\nmatching the behavior in the Linux TCP BBR code.\r\n\r\nCloses #77 (\"set P.tx_in_flight\").\r\n",
      "createdAt": "2025-08-20T20:27:09Z",
      "updatedAt": "2025-08-27T20:37:30Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "bf1e2b52f5d450edeb55cbc6aba5cd8ba168606f",
      "headRepository": "nealcardwell/draft-ietf-ccwg-bbr",
      "headRefName": "draft-ietf-ccwg-bbr-set-p-tx_in_flight",
      "headRefOid": "26d41b261b68e6713be78ad5c9ca4a3310ce8395",
      "closedAt": "2025-08-27T20:37:30Z",
      "mergedAt": "2025-08-27T20:37:30Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "eac7cce456d6242add3a038f0b00e24c6b00d380"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM67DSxP",
          "commit": {
            "abbreviatedOid": "26d41b2"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-20T20:52:15Z",
          "updatedAt": "2025-08-20T20:52:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM68ct6m",
          "commit": {
            "abbreviatedOid": "26d41b2"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-27T20:24:57Z",
          "updatedAt": "2025-08-27T20:24:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 79,
      "id": "PR_kwDOL3MllM6lph_5",
      "title": "Clarify the definition and usage of max filters for extra_acked_fitlter and max_bw_filter",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/79",
      "state": "MERGED",
      "author": "jbeshay",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #64\r\nCloses #65",
      "createdAt": "2025-08-27T17:44:30Z",
      "updatedAt": "2025-08-27T20:41:00Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "bf1e2b52f5d450edeb55cbc6aba5cd8ba168606f",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "jb_filters",
      "headRefOid": "94276bd0b3ed1c7c00fd0b790b974ee1db48a537",
      "closedAt": "2025-08-27T20:40:55Z",
      "mergedAt": "2025-08-27T20:40:55Z",
      "mergedBy": "jbeshay",
      "mergeCommit": {
        "oid": "c80575b0485015004b42ba0196e4fb6b4c06ea95"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM68alCK",
          "commit": {
            "abbreviatedOid": "fe99564"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-27T17:45:09Z",
          "updatedAt": "2025-08-27T17:45:10Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I am using this since I couldn't find a better reference for this algorithm.",
              "createdAt": "2025-08-27T17:45:10Z",
              "updatedAt": "2025-08-27T17:45:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM68at1X",
          "commit": {
            "abbreviatedOid": "fe99564"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-27T17:52:34Z",
          "updatedAt": "2025-08-27T17:52:34Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "> I am using this since I couldn't find a better reference for this algorithm.\r\n\r\nSGTM, thanks!\r\n",
              "createdAt": "2025-08-27T17:52:34Z",
              "updatedAt": "2025-08-27T17:52:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM68azuF",
          "commit": {
            "abbreviatedOid": "fe99564"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-27T17:57:01Z",
          "updatedAt": "2025-08-27T17:57:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM68c3hh",
          "commit": {
            "abbreviatedOid": "94276bd"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-27T20:40:25Z",
          "updatedAt": "2025-08-27T20:40:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOL3MllM6lrUDk",
      "title": "Tweak C.next_send_time",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/80",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "Editorial"
      ],
      "body": "Minor update to the description based on reviewing #76",
      "createdAt": "2025-08-27T20:53:31Z",
      "updatedAt": "2025-08-27T20:58:23Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "36a7e95c82c7d1b7b3db22ad2b97e55f5bb4d71f",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "ianswett-next-send-time",
      "headRefOid": "03a8fe6784cc6033c3987a00d8970d2c161830c0",
      "closedAt": "2025-08-27T20:58:23Z",
      "mergedAt": "2025-08-27T20:58:23Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "685f68567aa4b7d8de6253a558b8def14845ac22"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM68dATj",
          "commit": {
            "abbreviatedOid": "03a8fe6"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-27T20:55:16Z",
          "updatedAt": "2025-08-27T20:55:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM68dDj3",
          "commit": {
            "abbreviatedOid": "03a8fe6"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-27T20:57:36Z",
          "updatedAt": "2025-08-27T20:57:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOL3MllM6ltVQk",
      "title": "clarify relationship between per-packet state and offload mechanisms",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/81",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Have the \"per-packet state\" section and \"offload\" section\r\ncross-reference each other, and have both spots clarify\r\nthat it's recommended to track state per offload aggregate.\r\n\r\nMake a key clarification about P.tx_in_flight reflecting the\r\ninflight data after the transmission of P:\r\n\r\n-P.tx_in_flight: C.inflight at the time of the packet transmission.\r\n\r\n+P.tx_in_flight: C.inflight immediately after the transmission of packet P.\r\n\r\nFixes #66\r\n",
      "createdAt": "2025-08-28T01:40:35Z",
      "updatedAt": "2025-09-10T20:50:55Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "685f68567aa4b7d8de6253a558b8def14845ac22",
      "headRepository": "nealcardwell/draft-ietf-ccwg-bbr",
      "headRefName": "draft-ietf-ccwg-bbr-per-packet-state-with-offloads",
      "headRefOid": "a6178b546c714801a3a69ceba4c7dd1e45feb3dc",
      "closedAt": "2025-09-10T20:50:55Z",
      "mergedAt": "2025-09-10T20:50:55Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "081126456bc418455d977bc12ec0295d864267ef"
      },
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, Ian! I've incorporated your suggestions. PTAL at this next revision of the PR. Thanks!\r\n@ianswett @jbeshay \r\n",
          "createdAt": "2025-09-03T20:52:39Z",
          "updatedAt": "2025-09-03T20:52:39Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM68iC3N",
          "commit": {
            "abbreviatedOid": "e20d7a1"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Thanks for the PR, some suggestions and questions",
          "createdAt": "2025-08-28T03:48:43Z",
          "updatedAt": "2025-08-28T03:52:49Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\noffload mechanism then it is RECOMMENDED that the packet state be tracked\r\nfor each packet \"aggregate\" rather than each individual packet.  For simplicity this\r\n```",
              "createdAt": "2025-08-28T03:48:43Z",
              "updatedAt": "2025-08-28T03:52:49Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nper packet.\r\n```",
              "createdAt": "2025-08-28T03:49:25Z",
              "updatedAt": "2025-08-28T03:52:49Z"
            },
            {
              "originalPosition": 45,
              "body": "I'm not sure if IP packet is the correct term, but using C.SMSS here seems a bit off?\r\n\r\n```suggestion\r\nper-packet state described in Section [Per-packet (P) state](#per-packet-p-state) be\r\ntracked for each packet \"aggregate\" rather than each IP packet.\r\n```",
              "createdAt": "2025-08-28T03:52:28Z",
              "updatedAt": "2025-08-28T03:52:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM693iIM",
          "commit": {
            "abbreviatedOid": "a6178b5"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Nice!",
          "createdAt": "2025-09-04T13:54:15Z",
          "updatedAt": "2025-09-04T13:54:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOL3MllM6-MBhQ",
          "commit": {
            "abbreviatedOid": "a6178b5"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-05T21:21:15Z",
          "updatedAt": "2025-09-05T21:21:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOL3MllM6lt0sM",
      "title": "fix outdated summary of \"most recently sent packet\"",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/82",
      "state": "MERGED",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Also fix some mentions of rs that should now be RS.",
      "createdAt": "2025-08-28T03:09:18Z",
      "updatedAt": "2025-09-03T20:43:30Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "685f68567aa4b7d8de6253a558b8def14845ac22",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-patch-bbr-most-recently-sent",
      "headRefOid": "038c97c636405e19c8564bd4fc693c29d35cd381",
      "closedAt": "2025-09-03T20:43:22Z",
      "mergedAt": "2025-09-03T20:43:22Z",
      "mergedBy": "nealcardwell",
      "mergeCommit": {
        "oid": "5f06df48bd9806aac52e851567b59b4a6d8b18c2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM68iBbJ",
          "commit": {
            "abbreviatedOid": "038c97c"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-28T03:46:01Z",
          "updatedAt": "2025-08-28T03:46:22Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "nit: This function name is difficult to parse",
              "createdAt": "2025-08-28T03:46:01Z",
              "updatedAt": "2025-08-28T10:32:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM69r4Di",
          "commit": {
            "abbreviatedOid": "038c97c"
          },
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-03T20:43:01Z",
          "updatedAt": "2025-09-03T20:43:01Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "> nit: This function name is difficult to parse\r\n\r\nAgreed. :-) I will send a follow-on PR to propose something simpler to parse. Thanks!\r\n",
              "createdAt": "2025-09-03T20:43:01Z",
              "updatedAt": "2025-09-03T20:43:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOL3MllM6luSh_",
      "title": "clarify implicit C, BBR, RS parameters and relationship of RS and P in stretch ACKs",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/83",
      "state": "OPEN",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Clarify that all pseudocode functions have access to implicit (C) and\n(BBR) parameters (e.g., via a Transmission Control Block or TCB in\nTCP, or a \"this\" pointer in a C++ implementation of QUIC or other\nuser-space transports), and ACK-related functions also have access to\nan implicit (RS) parameter.\n\nClarify the relationship of (RS) and (P) in handling for ACKs, which\ncan mark 0, 1, or many packets as acknowledged:\n\n+ first call InitRateSample() once per ACK\n+ then call UpdateRateSample() once per packet P acknowledged by the current ACK\n+ finally call GenerateRateSample() after those steps\n\nFixes #58\n",
      "createdAt": "2025-08-28T04:17:14Z",
      "updatedAt": "2025-09-14T20:42:16Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "685f68567aa4b7d8de6253a558b8def14845ac22",
      "headRepository": "nealcardwell/draft-ietf-ccwg-bbr",
      "headRefName": "draft-ietf-ccwg-bbr-clarify-BBRUpdateOnACK",
      "headRefOid": "1e9b696a4fee8cfd764ca66752935628dfb07946",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6-L8SS",
          "commit": {
            "abbreviatedOid": "5b3755a"
          },
          "author": "jbeshay",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-05T21:11:57Z",
          "updatedAt": "2025-09-05T21:19:04Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "```suggestion\r\n  /* Update RS when a packet is acknowledged. */\r\n```",
              "createdAt": "2025-09-05T21:11:57Z",
              "updatedAt": "2025-09-05T21:19:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOL3MllM7AEk9q",
          "commit": {
            "abbreviatedOid": "1e9b696"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Thanks for the nice PR, I left some small suggestions.",
          "createdAt": "2025-09-14T20:36:29Z",
          "updatedAt": "2025-09-14T20:42:16Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\naccess to the the (RS) for for the rate sample populated processing that ACK.\r\n```",
              "createdAt": "2025-09-14T20:36:29Z",
              "updatedAt": "2025-09-14T20:42:16Z"
            },
            {
              "originalPosition": 68,
              "body": "```suggestion\r\nNext, for each newly acknowledged packet, the connection calls\r\n```",
              "createdAt": "2025-09-14T20:37:14Z",
              "updatedAt": "2025-09-14T20:42:16Z"
            },
            {
              "originalPosition": 70,
              "body": "Last transmitted is a bit odd for non-TCP transports, since in QUIC a packet is only transmitted once.  Can we just drop 'last' and leave it as an implementation detail?\r\n\r\n```suggestion\r\nconnection delivery information from the time at which the packet was\r\n```",
              "createdAt": "2025-09-14T20:39:18Z",
              "updatedAt": "2025-09-14T20:42:16Z"
            },
            {
              "originalPosition": 94,
              "body": "```suggestion\r\nFinally, after the connection has processed all newly acknowledged packets for this\r\n```",
              "createdAt": "2025-09-14T20:40:50Z",
              "updatedAt": "2025-09-14T20:42:16Z"
            }
          ]
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOL3MllM6m667D",
      "title": "s/BBRInflightLongtermFromLostPacket/BBRInflightAtLoss/",
      "url": "https://github.com/ietf-wg-ccwg/draft-ietf-ccwg-bbr/pull/84",
      "state": "OPEN",
      "author": "nealcardwell",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@ianswett noted that \"BBRInflightLongtermFromLostPacket\" is long and hard to parse. Let's switch to something shorter, and make it consistent with the name of the variable that the function is returning.",
      "createdAt": "2025-09-04T18:42:37Z",
      "updatedAt": "2025-09-11T22:39:08Z",
      "baseRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "baseRefName": "main",
      "baseRefOid": "5f06df48bd9806aac52e851567b59b4a6d8b18c2",
      "headRepository": "ietf-wg-ccwg/draft-ietf-ccwg-bbr",
      "headRefName": "nealcardwell-bbr-inflight-at-loss-function-rename",
      "headRefOid": "904c67a67f05162b23b09537161157d87236592f",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "nealcardwell",
          "authorAssociation": "COLLABORATOR",
          "body": "cc: @ianswett @jbeshay ",
          "createdAt": "2025-09-04T18:42:46Z",
          "updatedAt": "2025-09-04T18:42:46Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOL3MllM6_jyZl",
          "commit": {
            "abbreviatedOid": "904c67a"
          },
          "author": "ianswett",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks for the rename, this is much easier to read.",
          "createdAt": "2025-09-11T22:39:08Z",
          "updatedAt": "2025-09-11T22:39:08Z",
          "comments": []
        }
      ]
    }
  ]
}